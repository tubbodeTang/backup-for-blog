{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-vexo/source/googlebdb039cec5f9d46f.html","path":"googlebdb039cec5f9d46f.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/myLogo.png","path":"css/images/myLogo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-vexo/.gitignore","hash":"99e5bb4cc2a0b34f697ecc7c146f9d10d0a986e8","modified":1503562808394},{"_id":"themes/hexo-theme-vexo/.travis.yml","hash":"5f32a4b4f10c5bd346330be623fbad064eec5129","modified":1503562808397},{"_id":"themes/hexo-theme-vexo/_config.yml","hash":"e5c5a0056832bb541352453f8cb2f1584f687ba2","modified":1568966064528},{"_id":"themes/hexo-theme-vexo/lint.sh","hash":"2f3d1e5bab055677cab305b34220ba090a59f49e","modified":1503562808444},{"_id":"themes/hexo-theme-vexo/LICENSE","hash":"96a961acb8766182dca9e15280b37ee18156cee9","modified":1503562808399},{"_id":"themes/hexo-theme-vexo/README.md","hash":"bc09031573ec51da92b7c41123dad5f097016ab8","modified":1503562808401},{"_id":"themes/hexo-theme-vexo/package.json","hash":"959ce9dd213d7bcec60f1de4215b4534e098f232","modified":1503562808445},{"_id":"themes/hexo-theme-vexo/.git/FETCH_HEAD","hash":"674b8e0214e8f34075105dafb2a77460ba85b2ff","modified":1505702948657},{"_id":"themes/hexo-theme-vexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1503562808280},{"_id":"themes/hexo-theme-vexo/.git/config","hash":"48ef314ad070956b9143c7813deb6441d9fde1a4","modified":1503562808315},{"_id":"themes/hexo-theme-vexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1503562774193},{"_id":"themes/hexo-theme-vexo/.git/packed-refs","hash":"104d2c2c94d832902c078ae982aba2c4d34ecd01","modified":1503562808256},{"_id":"source/_drafts/Javascript 闭包.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521439168134},{"_id":"source/_drafts/Markdown 使用.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521093511124},{"_id":"themes/hexo-theme-vexo/.git/index","hash":"86346e0b42e35ee9cd12066fa7fd2ae4cf8ba7c7","modified":1504073414797},{"_id":"themes/hexo-theme-vexo/layout/diary.ejs","hash":"085f6276f94eaffba72c7c895d0e08728c8e85e1","modified":1555384235464},{"_id":"themes/hexo-theme-vexo/layout/layout.ejs","hash":"f2663b2d38d506488954de4ee88437f7ecd8bef6","modified":1504073412985},{"_id":"themes/hexo-theme-vexo/layout/archive.ejs","hash":"9c2a4e2313ad0a915cc46bca3f471fedfbe5db52","modified":1555383110886},{"_id":"themes/hexo-theme-vexo/layout/page.ejs","hash":"7a0d56f5d4ef98c8378bef0004d12e497e8becf4","modified":1552833144768},{"_id":"themes/hexo-theme-vexo/layout/index.ejs","hash":"082e380a938b5ef6411a076b139f5638d84bd85e","modified":1555396292432},{"_id":"themes/hexo-theme-vexo/source/googlebdb039cec5f9d46f.html","hash":"7a0fd6eb488a07325b391f9f3856fbe7392b598d","modified":1562141459198},{"_id":"themes/hexo-theme-vexo/layout/tags.ejs","hash":"d212c99fe1283e2939a31c1137a861b985d20054","modified":1503562808442},{"_id":"themes/hexo-theme-vexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1503562775958},{"_id":"themes/hexo-theme-vexo/layout/project.ejs","hash":"60c1d8d36f058b663777958317da2453899eca87","modified":1503562808440},{"_id":"themes/hexo-theme-vexo/.git/logs/HEAD","hash":"031d35bc860328b23548bc0159ca26ef26fd8e23","modified":1503562808291},{"_id":"themes/hexo-theme-vexo/layout/_partial/archive.ejs","hash":"99cf513b3ffdd800672cf7171cd60279fedd8576","modified":1503562808419},{"_id":"themes/hexo-theme-vexo/layout/about.ejs","hash":"31e5185ab5b66832ecc9a6c3391e68d84e4c584d","modified":1503562808432},{"_id":"themes/hexo-theme-vexo/layout/_partial/head.ejs","hash":"aebd0bb81dc20751cf10b8da70c7c1b34a152050","modified":1562121314527},{"_id":"themes/hexo-theme-vexo/layout/_partial/header.ejs","hash":"76a8d8d63a37bb32a6daa9a4e18301664c41b8f7","modified":1505467695026},{"_id":"themes/hexo-theme-vexo/layout/_partial/tag.ejs","hash":"ff8f66ad350a0da1b7ef03840f70b637024e028c","modified":1503562808428},{"_id":"themes/hexo-theme-vexo/layout/_partial/pager.ejs","hash":"b56ebe2bff1223b76865c4a43f2a0c28c08e9e7e","modified":1503562808426},{"_id":"themes/hexo-theme-vexo/layout/_partial/top.ejs","hash":"cb8abc06fa14d3ccc085629bbff0333d2f7aef37","modified":1503562808431},{"_id":"themes/hexo-theme-vexo/source/css/_config.styl","hash":"67dc749f1017abc9ea5f638ba0e0749cd47a267c","modified":1505466247607},{"_id":"themes/hexo-theme-vexo/layout/_partial/diary.ejs","hash":"038bf04c65eb1d33260ede46b9e7065e68baa4a9","modified":1555396292433},{"_id":"themes/hexo-theme-vexo/source/css/style.styl","hash":"8f92ade0bfd5973f3c3ffe10258fd6faaf1c8816","modified":1555396146831},{"_id":"themes/hexo-theme-vexo/layout/_partial/footer.ejs","hash":"518f7de5b545ac14e06629bee07bb423d8731fa7","modified":1555383531958},{"_id":"themes/hexo-theme-vexo/_source/about/index.md","hash":"54861b4ba18c5d09a6b0d92429cabd617023caa0","modified":1503562808407},{"_id":"themes/hexo-theme-vexo/_source/project/index.md","hash":"9e533e682312e2dc14844baa0c2576f4ee11169a","modified":1503562808411},{"_id":"themes/hexo-theme-vexo/_source/tags/index.md","hash":"ae19acf22f855d3acfd9f58d28aebd1bd8ba4def","modified":1503562808415},{"_id":"themes/hexo-theme-vexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1503562774920},{"_id":"themes/hexo-theme-vexo/source/js/script.js","hash":"3b16f2ff1d6596b2206127bf7ea8855fb6894987","modified":1503562808564},{"_id":"themes/hexo-theme-vexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1503562775141},{"_id":"themes/hexo-theme-vexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1503562775145},{"_id":"themes/hexo-theme-vexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1503562775420},{"_id":"themes/hexo-theme-vexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1503562775633},{"_id":"themes/hexo-theme-vexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1503562775707},{"_id":"themes/hexo-theme-vexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1503562775121},{"_id":"themes/hexo-theme-vexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1503562775856},{"_id":"source/_posts/Javascript 之数组操作（下）.md","hash":"a8b671cb66368e58b30737ca63211f85b5b7b48b","modified":1521098046447},{"_id":"source/_posts/Javascript 之数组操作（上）.md","hash":"6c452a77f5a9b227771753990ea8bb3236a487b6","modified":1521099276015},{"_id":"themes/hexo-theme-vexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1503562775954},{"_id":"themes/hexo-theme-vexo/source/js/qrious.js","hash":"8017310ee572950086944a4c26e2017522add8e9","modified":1503562808562},{"_id":"source/_posts/echarts 之复合饼图的解决方案.md","hash":"b8a3babf26ff60012489d92585166caf644e5b9b","modified":1551869703740},{"_id":"source/_posts/常用图表总结.md","hash":"75622d9ca1e96862f21ca1918830e94e4576eb1f","modified":1561970369246},{"_id":"themes/hexo-theme-vexo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1503562775703},{"_id":"source/_posts/关于日课的计划.md","hash":"f04d5c21678622bbebf4cf9b85beebdcf468aa90","modified":1551874381561},{"_id":"themes/hexo-theme-vexo/.git/objects/0b/dd328d5151de10b5ee25fb60a584ca59718d3a","hash":"5e6785b9578170524e0290d9e798a7c4aea22c3d","modified":1504506738878},{"_id":"themes/hexo-theme-vexo/.git/objects/13/65215f4275b3019157617f90d42eb06b8cb667","hash":"a96a9996860b927ad073e3bc51b5faffa9dcc131","modified":1504356971309},{"_id":"themes/hexo-theme-vexo/.git/objects/15/f6b2f1ca28f26892ea0984255489a482ecbbae","hash":"659f9cfd7427054cf760b6ddcf406f64092283e2","modified":1504356971349},{"_id":"source/_posts/工具推荐——Cmder.md","hash":"e9f34fe3303b35b7ddaae8b3a72c21a357bdddaf","modified":1561968499665},{"_id":"themes/hexo-theme-vexo/.git/objects/f2/746e5b1b1a81645dacfb96983fb87ff2496a65","hash":"8309d53665024d39471d11f14c767bc5493f38eb","modified":1505465883110},{"_id":"themes/hexo-theme-vexo/.git/objects/f4/8004dbfc35cdc3032a74dfd0dfe116a43287ba","hash":"cdd7154d128713fecf045231721dce0650976fbf","modified":1504356971319},{"_id":"source/_posts/程序员的 Tricks - 01.md","hash":"f3e3e37cfe666eb25c5de66e17644a8841c86914","modified":1561970369246},{"_id":"themes/hexo-theme-vexo/.git/objects/ea/34c9a69f71b90c74655437f0cec5a2f89b3832","hash":"077be7b160a0e389ab8c8687666ed7ad28fc9ff5","modified":1504356971359},{"_id":"themes/hexo-theme-vexo/.git/refs/heads/master","hash":"daab59e07919301fe79e877aa08b31b4fdf37fd7","modified":1503562808288},{"_id":"themes/hexo-theme-vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1503562808473},{"_id":"themes/hexo-theme-vexo/.git/objects/pack/pack-407d6e6fb271320df9f687893097e9103424549a.idx","hash":"d76baea41f3909803f5ffa777ecd076a948d834d","modified":1503562807797},{"_id":"themes/hexo-theme-vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1503562808517},{"_id":"themes/hexo-theme-vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1503562808471},{"_id":"themes/hexo-theme-vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1503562808519},{"_id":"themes/hexo-theme-vexo/source/css/images/myLogo.png","hash":"e8c93a757ad5a50332e9e0a6ebaf434edda329b3","modified":1505465421537},{"_id":"themes/hexo-theme-vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1503562808515},{"_id":"themes/hexo-theme-vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1503562808534},{"_id":"themes/hexo-theme-vexo/source/js/gitment.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1503562808559},{"_id":"themes/hexo-theme-vexo/.git/objects/e6/569c53781dce6cbc8490617e4c53e90b7122f8","hash":"e2787e3d49e49c025f59592bb6755f3ee4399797","modified":1504506738895},{"_id":"themes/hexo-theme-vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1503562808522},{"_id":"themes/hexo-theme-vexo/source/css/_partial/footer.styl","hash":"28c891d63bd827cb9f34fa5154c01a226d0eeafc","modified":1503562808456},{"_id":"themes/hexo-theme-vexo/source/css/_partial/about.styl","hash":"5295b1e6b342eb6cccecf20e0469df808b7b76e7","modified":1503562808452},{"_id":"themes/hexo-theme-vexo/source/css/plugins/gitment.css","hash":"1190f8b5c9962b96c3d3631b15ab8680faa9ddef","modified":1503562808525},{"_id":"themes/hexo-theme-vexo/source/css/_partial/archive.styl","hash":"5150e6ed6c9b0613da014304048650659412fd33","modified":1503562808454},{"_id":"themes/hexo-theme-vexo/source/css/_partial/pager.styl","hash":"506c59380c56f03b9ddd08fd18cfaaf17888858a","modified":1503562808463},{"_id":"themes/hexo-theme-vexo/source/css/_partial/header.styl","hash":"86b980eed086beca94e869fd7a524de4ef7a71e2","modified":1505467688814},{"_id":"themes/hexo-theme-vexo/source/css/_partial/markdown.styl","hash":"01a36f1e5ffa3ba0da80764c3a0f3f674b758525","modified":1503562808460},{"_id":"themes/hexo-theme-vexo/.git/logs/refs/heads/master","hash":"031d35bc860328b23548bc0159ca26ef26fd8e23","modified":1503562808296},{"_id":"themes/hexo-theme-vexo/source/css/_partial/tags.styl","hash":"14cd7fbc4309ed2c470746497af14d79e62b6641","modified":1503562808466},{"_id":"themes/hexo-theme-vexo/source/css/_partial/project.styl","hash":"a4dc0b4bdf1b5e8fcd3a4c6f4d9b2ed8c06e72ba","modified":1503562808464},{"_id":"themes/hexo-theme-vexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1503562808274},{"_id":"themes/hexo-theme-vexo/.git/refs/remotes/origin/develop","hash":"877c514f5395e360da1b472fbe7af43d88687c59","modified":1504506739321},{"_id":"themes/hexo-theme-vexo/.git/refs/remotes/origin/master","hash":"c56d44534904e01c99e7c9e932373e4d70bf4fe0","modified":1505465883676},{"_id":"source/_posts/终于开始写博客了.md","hash":"2c33c286c58bc37d994fd05c22aa284433948dd8","modified":1552014568201},{"_id":"themes/hexo-theme-vexo/.git/logs/refs/remotes/origin/HEAD","hash":"031d35bc860328b23548bc0159ca26ef26fd8e23","modified":1503562808274},{"_id":"themes/hexo-theme-vexo/.git/logs/refs/remotes/origin/master","hash":"54c18eb6ea26988c2a913d66d9bbd115a16d3d7c","modified":1505465883688},{"_id":"themes/hexo-theme-vexo/.git/logs/refs/remotes/origin/develop","hash":"c1c5f49c129933b7cb054a62fafedf875dca3942","modified":1504506739361},{"_id":"themes/hexo-theme-vexo/.git/objects/pack/pack-407d6e6fb271320df9f687893097e9103424549a.pack","hash":"1c71306fa6023324a0f27e1788377b3b79544c97","modified":1503562807894},{"_id":"public/2018/09/19/常用图表总结/index.html","hash":"91e718f5e7a1a2e0e1966bbce248c1cc84b72eca","modified":1568966390475},{"_id":"public/2018/07/22/工具推荐——Cmder/index.html","hash":"fba2cb51b7ce1f076c3a7eb2d00cf825136ef3f1","modified":1568966390798},{"_id":"public/2018/05/22/echarts 之复合饼图的解决方案/index.html","hash":"744bd916bad2a9edd238efa1ffda5356a3d13a64","modified":1568966390882},{"_id":"public/2018/03/15/Javascript 之数组操作（下）/index.html","hash":"024d06f0cc9e51a174142d4f010a02e92e3baa74","modified":1568966390885},{"_id":"public/2017/08/23/终于开始写博客了/index.html","hash":"aeb72fe8a1f6ddede41795f9b5420a2bba4d76fe","modified":1568966390885},{"_id":"public/2018/08/10/程序员的 Tricks - 01/index.html","hash":"1502ddabf15f012352ccd443ffd6734da679bd7f","modified":1568966390886},{"_id":"public/index.html","hash":"81e135cf78f62669e2a275cfa8c6f0bbf344ab65","modified":1568966390886},{"_id":"public/archives/index.html","hash":"c2f802041868b2729a391f01e95146eb83c2f370","modified":1568966390886},{"_id":"public/archives/2018/index.html","hash":"d6d5b209c7cd42f48828ea2320ef9e4591b4bcf3","modified":1568966390886},{"_id":"public/archives/2018/02/index.html","hash":"649dc46025a87af03017420b6c7c0c63e397b847","modified":1568966390886},{"_id":"public/2019/03/06/关于日课的计划/index.html","hash":"f3447fc1c548df46e3ce2b839e33abf498d060ad","modified":1568966390886},{"_id":"public/archives/2017/index.html","hash":"a6ce294cc445efb0304cb7e30a26f4fba46703d7","modified":1568966390887},{"_id":"public/archives/2017/08/index.html","hash":"b9bf3a02883b6067ec6508c5040315c928fb0302","modified":1568966390887},{"_id":"public/2018/02/06/Javascript 之数组操作（上）/index.html","hash":"76cc2b42f0deda31789e8c5b59ac8fff5236d404","modified":1568966390887},{"_id":"public/archives/2018/03/index.html","hash":"b027ef31c35b70d24e189c51fccd19714fef80cf","modified":1568966390895},{"_id":"public/archives/2018/05/index.html","hash":"de2dacfe51aa0319b3dd2fdafb9e368e12048b0e","modified":1568966390895},{"_id":"public/archives/2018/07/index.html","hash":"08dd21ffa9928a65bfb9e5f9cfac2040e8d48ccf","modified":1568966390895},{"_id":"public/archives/2018/08/index.html","hash":"dcd4c760337aa8a9fdfdcd842ca3e304eba3430a","modified":1568966390895},{"_id":"public/archives/2018/09/index.html","hash":"231410a96c862d41effa67428113e3d5a53b518d","modified":1568966390895},{"_id":"public/categories/Javascript/index.html","hash":"1361b2d4e1582d2639c6821cf501ad542ac7d9c7","modified":1568966390895},{"_id":"public/categories/Tools/index.html","hash":"25502045b5e40c0c93c2cae56b843d2c43e6aa52","modified":1568966390896},{"_id":"public/categories/个人经历/index.html","hash":"7ce453bd00bd20eb7130722d7846cbcc5ce6b100","modified":1568966390896},{"_id":"public/tags/Echarts/index.html","hash":"ad26ad0b4f529f394d3d1b98a9071093c94d08cb","modified":1568966390896},{"_id":"public/tags/Javascript/index.html","hash":"e334c00d8dcce2267d1016267df8214ca0d48cde","modified":1568966390898},{"_id":"public/tags/Tools/index.html","hash":"d4b42ac23702dc9ae3824c4ac6a8757062e2c778","modified":1568966390898},{"_id":"public/tags/生活-经历/index.html","hash":"a3b56463cf85420f1edbe6e308f08d25f5b2eccf","modified":1568966390898},{"_id":"public/archives/2019/index.html","hash":"8b53aa925455ac391c6ad614de9235e51a53e73a","modified":1568966390898},{"_id":"public/archives/2019/03/index.html","hash":"61968168e9327804aaba9188bc49c80e44523616","modified":1568966390898},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1568966390902},{"_id":"public/css/images/myLogo.png","hash":"e8c93a757ad5a50332e9e0a6ebaf434edda329b3","modified":1568966390902},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1568966390902},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1568966390902},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1568966390904},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1568966390904},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1568966390904},{"_id":"public/googlebdb039cec5f9d46f.html","hash":"7a0fd6eb488a07325b391f9f3856fbe7392b598d","modified":1568966404384},{"_id":"public/js/script.js","hash":"a19ed5f3c1d9c64855f162bce7ec66b47aada780","modified":1568966404384},{"_id":"public/css/style.css","hash":"fe34e6a981bc38d782bab965b408ae1d17211979","modified":1568966404384},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1568966404384},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1568966404846},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1568966404847},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1568966405023}],"Category":[{"name":"Javascript","_id":"ck0ru2onx0004zoq44huta81b"},{"name":"Tools","_id":"ck0ru2opd000czoq45dotdyvd"},{"name":"个人经历","_id":"ck0ru2opk000gzoq48l29tt1h"}],"Data":[],"Page":[],"Post":[{"_content":"","source":"_drafts/Javascript 闭包.md","raw":"","slug":"Javascript 闭包","published":0,"date":"2018-03-19T05:59:28.134Z","updated":"2018-03-19T05:59:28.134Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2ofu0000zoq4omnwrqcs","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_drafts/Markdown 使用.md","raw":"","slug":"Markdown 使用","published":0,"date":"2018-02-01T08:56:55.702Z","updated":"2018-03-15T05:58:31.124Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2ojc0001zoq465qqy0yw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Javascript 之数组操作（下）","date":"2018-03-15T06:04:01.000Z","_content":"\n\n>嗯，接着上次的写，这次写的几个方法，使用频率相对来说少一些，最后几个混个眼熟吧，可能不经常用还是会忘记（捂脸\n  \n\n\n\n## 数组的常用操作\n\n\n#### 数组的常用方法 \n\n\n##### copyWithin()\n\n用于复制调用数组中的一部分，到调用数组的指定位置。会覆盖原有的元素。\n\n用法：\n```\n// copyWithin(复制目标位置，?复制源起始位置，复制源结束位置。默认是到数组的末尾)\n// 注意，源起始位置和结束位置的大小如果不对，这个方法将毫无作用。\n\nvar Array1=[a,b,c,d,e,f];\n\nArray1.copyWithin(2,0);\n// 结果是Array1=[a,b,a,b,c,d]\n\nArray1.copyWithin(2,0,3);\n// 结果则是Array1=[a,b,a,b,c,f]\n\n```\n\n\n##### fill()\n\n用于把某个对象或值填充到数组，此操作会改变原数组的元素\n\n用法：\n```\n// array.fill(要填充的对象 , ?开始填充的位置。默认是0 , ?停止填充的位置。默认array.length)\n\nvar Array1 = [\"a\", \"b\", \"c\", \"d\"];\nvar f = [\"hh\", \"jj\"];\nArray1.fill(f, 1, 3);\n\n// Array1 输出结果：[Array(2), Array(2), Array(2), Array(2)]\n```\n\n\n##### join() VS toString()\n\njoin() 用于把数组中的所有元素转换一个字符串。\n这些元素是通过指定的分隔符进行分隔的，如果没有指定，默认是用逗号分隔。\n而 toString() 把数组中的所有元素转换一个字符串并用逗号分隔，不能指定分隔符。\n用法：\n```\n// array.join(?分隔符。默认是\",\")\n// array.toString()\n\nvar f = [\"hh\", \"jj\"];\nvar Array1 = [\"a\", \"b\", \"c\", \"d\", \"e\", f];\nconsole.log(Array1.join(\"#\")); // 控制台输出 a#b#c#d#e#hh,jj\nconsole.log(Array1.toString()); // 控制台输出 a,b,c,d,e,hh,jj\n\n```\n\n##### reduce() VS reduceRight()\n\n这两个方法也类似，只不过 reduceRight() 从右往左操作，reduce() 从左往右操作。\n\n以 reduceRight() 为例介绍用法：\n```\n//array.reduceRight(function(初始值, 或者计算结束后的返回值, 当前元素, ?当前元素的索引, ?当前元素所属的数组对象), ?计算的初始值。默认是尾元素，这时计算将从倒数第二个元素开始。如果指定了初始值，计算将从第一个元素开始)\n\nvar numbers = [2, 45, 30, 100];\nfunction getSum(total, num) {\n    return total - num;\n}\nconsole.log(\n  numbers.reduceRight(getSum,200);\n)\n// 控制台输出23\n\nconsole.log(\n  numbers.reduceRight(getSum);\n)\n// 控制台输出23\n\n```\n这两个操作还能衍生出一些神奇的功能，请移步[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)参考\n\n\n\n##### splice()\n\n用于向源数组中删除，添加元素，参数比较多，直接看例子比较清楚。\n\n用法：\n```\n//array.splice(start, ?deleteCount, ?item1, ?item2, ?...)\n//除开始操作的位置必须外，其他都是可选项\n//也有以下三种情况，注意区间的位置，都是闭区间\n//1. 从start位置开始删除[start，end]的元素。\n//array.splice(start)\n//2. 从start位置开始删除[start，Count]的元素。\n//array.splice(start, deleteCount)    \n//3. 从start位置开始添加item1, item2, ...元素。\n//array.splice(start, 0, item1, item2, ...)   \n\nvar myFish = [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"];\nvar removed = myFish.splice(myFish.length - 3, 2,\"red\");\n// 运算后的myFish： [\"parrot\", \"anemone\", \"red\", \"sturgeon\"] \n// 被删除元素数组：[\"blue\", \"trumpet\"]\n```\n\n\n##### valueOf()\n\nvalueOf() 方法返回 Array 对象的原始值。即 Array1.valueOf()与 Array1 返回值一样。\nvalueOf() 方法通常由 JavaScript 在后台自动调用，不需要在代码中出现，了解一下即可。","source":"_posts/Javascript 之数组操作（下）.md","raw":"---\ntitle: Javascript 之数组操作（下）\ndate: 2018-03-15 14:04:01\ntags: Javascript\ncategories: Javascript\n---\n\n\n>嗯，接着上次的写，这次写的几个方法，使用频率相对来说少一些，最后几个混个眼熟吧，可能不经常用还是会忘记（捂脸\n  \n\n\n\n## 数组的常用操作\n\n\n#### 数组的常用方法 \n\n\n##### copyWithin()\n\n用于复制调用数组中的一部分，到调用数组的指定位置。会覆盖原有的元素。\n\n用法：\n```\n// copyWithin(复制目标位置，?复制源起始位置，复制源结束位置。默认是到数组的末尾)\n// 注意，源起始位置和结束位置的大小如果不对，这个方法将毫无作用。\n\nvar Array1=[a,b,c,d,e,f];\n\nArray1.copyWithin(2,0);\n// 结果是Array1=[a,b,a,b,c,d]\n\nArray1.copyWithin(2,0,3);\n// 结果则是Array1=[a,b,a,b,c,f]\n\n```\n\n\n##### fill()\n\n用于把某个对象或值填充到数组，此操作会改变原数组的元素\n\n用法：\n```\n// array.fill(要填充的对象 , ?开始填充的位置。默认是0 , ?停止填充的位置。默认array.length)\n\nvar Array1 = [\"a\", \"b\", \"c\", \"d\"];\nvar f = [\"hh\", \"jj\"];\nArray1.fill(f, 1, 3);\n\n// Array1 输出结果：[Array(2), Array(2), Array(2), Array(2)]\n```\n\n\n##### join() VS toString()\n\njoin() 用于把数组中的所有元素转换一个字符串。\n这些元素是通过指定的分隔符进行分隔的，如果没有指定，默认是用逗号分隔。\n而 toString() 把数组中的所有元素转换一个字符串并用逗号分隔，不能指定分隔符。\n用法：\n```\n// array.join(?分隔符。默认是\",\")\n// array.toString()\n\nvar f = [\"hh\", \"jj\"];\nvar Array1 = [\"a\", \"b\", \"c\", \"d\", \"e\", f];\nconsole.log(Array1.join(\"#\")); // 控制台输出 a#b#c#d#e#hh,jj\nconsole.log(Array1.toString()); // 控制台输出 a,b,c,d,e,hh,jj\n\n```\n\n##### reduce() VS reduceRight()\n\n这两个方法也类似，只不过 reduceRight() 从右往左操作，reduce() 从左往右操作。\n\n以 reduceRight() 为例介绍用法：\n```\n//array.reduceRight(function(初始值, 或者计算结束后的返回值, 当前元素, ?当前元素的索引, ?当前元素所属的数组对象), ?计算的初始值。默认是尾元素，这时计算将从倒数第二个元素开始。如果指定了初始值，计算将从第一个元素开始)\n\nvar numbers = [2, 45, 30, 100];\nfunction getSum(total, num) {\n    return total - num;\n}\nconsole.log(\n  numbers.reduceRight(getSum,200);\n)\n// 控制台输出23\n\nconsole.log(\n  numbers.reduceRight(getSum);\n)\n// 控制台输出23\n\n```\n这两个操作还能衍生出一些神奇的功能，请移步[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)参考\n\n\n\n##### splice()\n\n用于向源数组中删除，添加元素，参数比较多，直接看例子比较清楚。\n\n用法：\n```\n//array.splice(start, ?deleteCount, ?item1, ?item2, ?...)\n//除开始操作的位置必须外，其他都是可选项\n//也有以下三种情况，注意区间的位置，都是闭区间\n//1. 从start位置开始删除[start，end]的元素。\n//array.splice(start)\n//2. 从start位置开始删除[start，Count]的元素。\n//array.splice(start, deleteCount)    \n//3. 从start位置开始添加item1, item2, ...元素。\n//array.splice(start, 0, item1, item2, ...)   \n\nvar myFish = [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"];\nvar removed = myFish.splice(myFish.length - 3, 2,\"red\");\n// 运算后的myFish： [\"parrot\", \"anemone\", \"red\", \"sturgeon\"] \n// 被删除元素数组：[\"blue\", \"trumpet\"]\n```\n\n\n##### valueOf()\n\nvalueOf() 方法返回 Array 对象的原始值。即 Array1.valueOf()与 Array1 返回值一样。\nvalueOf() 方法通常由 JavaScript 在后台自动调用，不需要在代码中出现，了解一下即可。","slug":"Javascript 之数组操作（下）","published":1,"updated":"2018-03-15T07:14:06.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2oml0002zoq4qvtjq7li","content":"<blockquote>\n<p>嗯，接着上次的写，这次写的几个方法，使用频率相对来说少一些，最后几个混个眼熟吧，可能不经常用还是会忘记（捂脸</p>\n</blockquote>\n<h2 id=\"数组的常用操作\"><a href=\"#数组的常用操作\" class=\"headerlink\" title=\"数组的常用操作\"></a>数组的常用操作</h2><h4 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h4><h5 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h5><p>用于复制调用数组中的一部分，到调用数组的指定位置。会覆盖原有的元素。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// copyWithin(复制目标位置，?复制源起始位置，复制源结束位置。默认是到数组的末尾)</div><div class=\"line\">// 注意，源起始位置和结束位置的大小如果不对，这个方法将毫无作用。</div><div class=\"line\"></div><div class=\"line\">var Array1=[a,b,c,d,e,f];</div><div class=\"line\"></div><div class=\"line\">Array1.copyWithin(2,0);</div><div class=\"line\">// 结果是Array1=[a,b,a,b,c,d]</div><div class=\"line\"></div><div class=\"line\">Array1.copyWithin(2,0,3);</div><div class=\"line\">// 结果则是Array1=[a,b,a,b,c,f]</div></pre></td></tr></table></figure></p>\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><p>用于把某个对象或值填充到数组，此操作会改变原数组的元素</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.fill(要填充的对象 , ?开始填充的位置。默认是0 , ?停止填充的位置。默认array.length)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</div><div class=\"line\">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class=\"line\">Array1.fill(f, 1, 3);</div><div class=\"line\"></div><div class=\"line\">// Array1 输出结果：[Array(2), Array(2), Array(2), Array(2)]</div></pre></td></tr></table></figure></p>\n<h5 id=\"join-VS-toString\"><a href=\"#join-VS-toString\" class=\"headerlink\" title=\"join() VS toString()\"></a>join() VS toString()</h5><p>join() 用于把数组中的所有元素转换一个字符串。<br>这些元素是通过指定的分隔符进行分隔的，如果没有指定，默认是用逗号分隔。<br>而 toString() 把数组中的所有元素转换一个字符串并用逗号分隔，不能指定分隔符。<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.join(?分隔符。默认是&quot;,&quot;)</div><div class=\"line\">// array.toString()</div><div class=\"line\"></div><div class=\"line\">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class=\"line\">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, f];</div><div class=\"line\">console.log(Array1.join(&quot;#&quot;)); // 控制台输出 a#b#c#d#e#hh,jj</div><div class=\"line\">console.log(Array1.toString()); // 控制台输出 a,b,c,d,e,hh,jj</div></pre></td></tr></table></figure></p>\n<h5 id=\"reduce-VS-reduceRight\"><a href=\"#reduce-VS-reduceRight\" class=\"headerlink\" title=\"reduce() VS reduceRight()\"></a>reduce() VS reduceRight()</h5><p>这两个方法也类似，只不过 reduceRight() 从右往左操作，reduce() 从左往右操作。</p>\n<p>以 reduceRight() 为例介绍用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//array.reduceRight(function(初始值, 或者计算结束后的返回值, 当前元素, ?当前元素的索引, ?当前元素所属的数组对象), ?计算的初始值。默认是尾元素，这时计算将从倒数第二个元素开始。如果指定了初始值，计算将从第一个元素开始)</div><div class=\"line\"></div><div class=\"line\">var numbers = [2, 45, 30, 100];</div><div class=\"line\">function getSum(total, num) &#123;</div><div class=\"line\">    return total - num;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(</div><div class=\"line\">  numbers.reduceRight(getSum,200);</div><div class=\"line\">)</div><div class=\"line\">// 控制台输出23</div><div class=\"line\"></div><div class=\"line\">console.log(</div><div class=\"line\">  numbers.reduceRight(getSum);</div><div class=\"line\">)</div><div class=\"line\">// 控制台输出23</div></pre></td></tr></table></figure></p>\n<p>这两个操作还能衍生出一些神奇的功能，请移步<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"external\">这里</a>参考</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>用于向源数组中删除，添加元素，参数比较多，直接看例子比较清楚。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//array.splice(start, ?deleteCount, ?item1, ?item2, ?...)</div><div class=\"line\">//除开始操作的位置必须外，其他都是可选项</div><div class=\"line\">//也有以下三种情况，注意区间的位置，都是闭区间</div><div class=\"line\">//1. 从start位置开始删除[start，end]的元素。</div><div class=\"line\">//array.splice(start)</div><div class=\"line\">//2. 从start位置开始删除[start，Count]的元素。</div><div class=\"line\">//array.splice(start, deleteCount)    </div><div class=\"line\">//3. 从start位置开始添加item1, item2, ...元素。</div><div class=\"line\">//array.splice(start, 0, item1, item2, ...)   </div><div class=\"line\"></div><div class=\"line\">var myFish = [&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;, &quot;trumpet&quot;, &quot;sturgeon&quot;];</div><div class=\"line\">var removed = myFish.splice(myFish.length - 3, 2,&quot;red&quot;);</div><div class=\"line\">// 运算后的myFish： [&quot;parrot&quot;, &quot;anemone&quot;, &quot;red&quot;, &quot;sturgeon&quot;] </div><div class=\"line\">// 被删除元素数组：[&quot;blue&quot;, &quot;trumpet&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h5><p>valueOf() 方法返回 Array 对象的原始值。即 Array1.valueOf()与 Array1 返回值一样。<br>valueOf() 方法通常由 JavaScript 在后台自动调用，不需要在代码中出现，了解一下即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>嗯，接着上次的写，这次写的几个方法，使用频率相对来说少一些，最后几个混个眼熟吧，可能不经常用还是会忘记（捂脸</p>\n</blockquote>\n<h2 id=\"数组的常用操作\"><a href=\"#数组的常用操作\" class=\"headerlink\" title=\"数组的常用操作\"></a>数组的常用操作</h2><h4 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h4><h5 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h5><p>用于复制调用数组中的一部分，到调用数组的指定位置。会覆盖原有的元素。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// copyWithin(复制目标位置，?复制源起始位置，复制源结束位置。默认是到数组的末尾)</div><div class=\"line\">// 注意，源起始位置和结束位置的大小如果不对，这个方法将毫无作用。</div><div class=\"line\"></div><div class=\"line\">var Array1=[a,b,c,d,e,f];</div><div class=\"line\"></div><div class=\"line\">Array1.copyWithin(2,0);</div><div class=\"line\">// 结果是Array1=[a,b,a,b,c,d]</div><div class=\"line\"></div><div class=\"line\">Array1.copyWithin(2,0,3);</div><div class=\"line\">// 结果则是Array1=[a,b,a,b,c,f]</div></pre></td></tr></table></figure></p>\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><p>用于把某个对象或值填充到数组，此操作会改变原数组的元素</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.fill(要填充的对象 , ?开始填充的位置。默认是0 , ?停止填充的位置。默认array.length)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</div><div class=\"line\">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class=\"line\">Array1.fill(f, 1, 3);</div><div class=\"line\"></div><div class=\"line\">// Array1 输出结果：[Array(2), Array(2), Array(2), Array(2)]</div></pre></td></tr></table></figure></p>\n<h5 id=\"join-VS-toString\"><a href=\"#join-VS-toString\" class=\"headerlink\" title=\"join() VS toString()\"></a>join() VS toString()</h5><p>join() 用于把数组中的所有元素转换一个字符串。<br>这些元素是通过指定的分隔符进行分隔的，如果没有指定，默认是用逗号分隔。<br>而 toString() 把数组中的所有元素转换一个字符串并用逗号分隔，不能指定分隔符。<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.join(?分隔符。默认是&quot;,&quot;)</div><div class=\"line\">// array.toString()</div><div class=\"line\"></div><div class=\"line\">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class=\"line\">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, f];</div><div class=\"line\">console.log(Array1.join(&quot;#&quot;)); // 控制台输出 a#b#c#d#e#hh,jj</div><div class=\"line\">console.log(Array1.toString()); // 控制台输出 a,b,c,d,e,hh,jj</div></pre></td></tr></table></figure></p>\n<h5 id=\"reduce-VS-reduceRight\"><a href=\"#reduce-VS-reduceRight\" class=\"headerlink\" title=\"reduce() VS reduceRight()\"></a>reduce() VS reduceRight()</h5><p>这两个方法也类似，只不过 reduceRight() 从右往左操作，reduce() 从左往右操作。</p>\n<p>以 reduceRight() 为例介绍用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//array.reduceRight(function(初始值, 或者计算结束后的返回值, 当前元素, ?当前元素的索引, ?当前元素所属的数组对象), ?计算的初始值。默认是尾元素，这时计算将从倒数第二个元素开始。如果指定了初始值，计算将从第一个元素开始)</div><div class=\"line\"></div><div class=\"line\">var numbers = [2, 45, 30, 100];</div><div class=\"line\">function getSum(total, num) &#123;</div><div class=\"line\">    return total - num;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(</div><div class=\"line\">  numbers.reduceRight(getSum,200);</div><div class=\"line\">)</div><div class=\"line\">// 控制台输出23</div><div class=\"line\"></div><div class=\"line\">console.log(</div><div class=\"line\">  numbers.reduceRight(getSum);</div><div class=\"line\">)</div><div class=\"line\">// 控制台输出23</div></pre></td></tr></table></figure></p>\n<p>这两个操作还能衍生出一些神奇的功能，请移步<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"external\">这里</a>参考</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>用于向源数组中删除，添加元素，参数比较多，直接看例子比较清楚。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//array.splice(start, ?deleteCount, ?item1, ?item2, ?...)</div><div class=\"line\">//除开始操作的位置必须外，其他都是可选项</div><div class=\"line\">//也有以下三种情况，注意区间的位置，都是闭区间</div><div class=\"line\">//1. 从start位置开始删除[start，end]的元素。</div><div class=\"line\">//array.splice(start)</div><div class=\"line\">//2. 从start位置开始删除[start，Count]的元素。</div><div class=\"line\">//array.splice(start, deleteCount)    </div><div class=\"line\">//3. 从start位置开始添加item1, item2, ...元素。</div><div class=\"line\">//array.splice(start, 0, item1, item2, ...)   </div><div class=\"line\"></div><div class=\"line\">var myFish = [&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;, &quot;trumpet&quot;, &quot;sturgeon&quot;];</div><div class=\"line\">var removed = myFish.splice(myFish.length - 3, 2,&quot;red&quot;);</div><div class=\"line\">// 运算后的myFish： [&quot;parrot&quot;, &quot;anemone&quot;, &quot;red&quot;, &quot;sturgeon&quot;] </div><div class=\"line\">// 被删除元素数组：[&quot;blue&quot;, &quot;trumpet&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h5><p>valueOf() 方法返回 Array 对象的原始值。即 Array1.valueOf()与 Array1 返回值一样。<br>valueOf() 方法通常由 JavaScript 在后台自动调用，不需要在代码中出现，了解一下即可。</p>\n"},{"title":"Echarts 之复合饼图的解决方案","date":"2018-05-22T14:39:01.000Z","_content":"\n>Echarts 是百度出品的功能强大的开源可视化库，由 Javascript 实现。\n>具有丰富的可视化类型，良好的跨平台特性，绚丽的视觉效果。\n>是大数据分析展示的有力武器\n  \n\n \n老实说其实在我刚进入前端开发这个领域的时候就听说并使用了 Echarts ，那个时候还是 1.0 版本。\n\n最开始只是用到一些简单的条、饼、线图的组合展示，有时候我还会偷懒直接使用 [图说](http://tushuo.baidu.com/) 的可视化功能进行操作，也还挺方便的，不用记那么多属性，但是现在 [图说](http://tushuo.baidu.com/) 已经满足不了我更高级的需求了，有什么问题还是看文档更清晰。\n\n\n一直到今天，Echarts 已经出了 4.0 版本，功能和性能都有了非常的大的提升，也正因为这样，使用 Echarts 的人越来越多，Echarts 的社区也越来越活跃，活跃的社区又会促进 Echarts 生生不息的向前发展，形成一个良性循环。我想，这就是开源的魅力吧。\n\n最近在工作当中使用 Echarts 来深度挖掘和展示我手头的数据，发现有一个地方可能需要复合饼图来展示效果比较好。\n\n看了很多官方的实例，没有特别称手能直接拿来用的。GitHub 上 Echarts 的 Issues 区我也去搜了，看有没有人已经踩过坑。结果发现一天前，就有人提了一个和我一模一样的情景，问有没有用复合图来实现的方案，他也不知道怎么解决。\n\n哈哈，结果还是要靠自己了。\n\n于是乎看了一些 Echarts Gallery 上大家的奇思妙想之后，我也有了灵感。\n\n（这里穿插说一句，Echarts 升级之后社区真的变强了很多，不仅有很清晰的官方文档和实例，Gallery 里各方大神的脑洞也真的很精彩，比如我就看见过用 Echarts 做动画的，Flappy Bird，扫雷，还有一些酷炫的 3D 效果我就不说了，一打开那界面电脑风扇都开始呜呜响，哈哈，留待给以后慢慢发掘，有空专门再写一个收集贴。）\n\n#### 方案一\n第一个方案是想画两个饼图，再用 series->type:graph 这个属性画两根线把两个饼图连起来。\n\n尝试了多次，发现不能通过点坐标的调整得到线的正确位置。我想要的是直角坐标，所以从直角坐标的角度看来，线的中心点是固定的，一直在 (0，0) ，不能上下左右移动。也就是说 y=kx+b 的 b 一直都是 0，只有线的斜率一直在变化，所以我判断那个坐标有可能是极坐标，所以才没有办法按直角坐标得到正确的结果。\n\n而且使用这种方式还有一个弊端，就是两个饼图连接点的坐标，其实不那么好确定，因为有可能随着百分比的变化而变化。所以最终，我放弃了这个方案。\n\n#### 方案二\n\n换一个思路，采用之前在 Gallery 中看见过的环状图套饼图来实现。\n\n我看见过用透明环状饼区来占位的，这样看起来透明饼区就不存在了，只能看到不透明的饼区，刚好可以用来做展开的详细复合图。\n\n于是乎有了下面这个效果，具体代码实现和结果可以到 Gallery 里 [查看](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)。\n\n![实现效果缩略图](http://echarts.baidu.com/ecg-storage/img/xHJaWqD-1Q.png \"实现效果缩略图\")\n\n\n两个版本的思路出来效果之后，我都给了 GitHub Issues 上和我相同问题的那个哥们一个回复，他也回复了我，和大家一起思考问题的感觉还是很棒的。\n\n我发表在 Gallery 里的 [示例](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)，截至目前也已经有了二十多次的浏览量。\n\n这就是分享的力量，它不仅帮助别人，同时也在激励监督自己，让自己做的更好。\n\n这是我第一次体验到分享的乐趣，所以记录下来，鞭策自己以后更加努力！\n","source":"_posts/echarts 之复合饼图的解决方案.md","raw":"---\ntitle: Echarts 之复合饼图的解决方案\ndate: 2018-05-22 22:39:01\ntags: Echarts\ncategories: Javascript\n---\n\n>Echarts 是百度出品的功能强大的开源可视化库，由 Javascript 实现。\n>具有丰富的可视化类型，良好的跨平台特性，绚丽的视觉效果。\n>是大数据分析展示的有力武器\n  \n\n \n老实说其实在我刚进入前端开发这个领域的时候就听说并使用了 Echarts ，那个时候还是 1.0 版本。\n\n最开始只是用到一些简单的条、饼、线图的组合展示，有时候我还会偷懒直接使用 [图说](http://tushuo.baidu.com/) 的可视化功能进行操作，也还挺方便的，不用记那么多属性，但是现在 [图说](http://tushuo.baidu.com/) 已经满足不了我更高级的需求了，有什么问题还是看文档更清晰。\n\n\n一直到今天，Echarts 已经出了 4.0 版本，功能和性能都有了非常的大的提升，也正因为这样，使用 Echarts 的人越来越多，Echarts 的社区也越来越活跃，活跃的社区又会促进 Echarts 生生不息的向前发展，形成一个良性循环。我想，这就是开源的魅力吧。\n\n最近在工作当中使用 Echarts 来深度挖掘和展示我手头的数据，发现有一个地方可能需要复合饼图来展示效果比较好。\n\n看了很多官方的实例，没有特别称手能直接拿来用的。GitHub 上 Echarts 的 Issues 区我也去搜了，看有没有人已经踩过坑。结果发现一天前，就有人提了一个和我一模一样的情景，问有没有用复合图来实现的方案，他也不知道怎么解决。\n\n哈哈，结果还是要靠自己了。\n\n于是乎看了一些 Echarts Gallery 上大家的奇思妙想之后，我也有了灵感。\n\n（这里穿插说一句，Echarts 升级之后社区真的变强了很多，不仅有很清晰的官方文档和实例，Gallery 里各方大神的脑洞也真的很精彩，比如我就看见过用 Echarts 做动画的，Flappy Bird，扫雷，还有一些酷炫的 3D 效果我就不说了，一打开那界面电脑风扇都开始呜呜响，哈哈，留待给以后慢慢发掘，有空专门再写一个收集贴。）\n\n#### 方案一\n第一个方案是想画两个饼图，再用 series->type:graph 这个属性画两根线把两个饼图连起来。\n\n尝试了多次，发现不能通过点坐标的调整得到线的正确位置。我想要的是直角坐标，所以从直角坐标的角度看来，线的中心点是固定的，一直在 (0，0) ，不能上下左右移动。也就是说 y=kx+b 的 b 一直都是 0，只有线的斜率一直在变化，所以我判断那个坐标有可能是极坐标，所以才没有办法按直角坐标得到正确的结果。\n\n而且使用这种方式还有一个弊端，就是两个饼图连接点的坐标，其实不那么好确定，因为有可能随着百分比的变化而变化。所以最终，我放弃了这个方案。\n\n#### 方案二\n\n换一个思路，采用之前在 Gallery 中看见过的环状图套饼图来实现。\n\n我看见过用透明环状饼区来占位的，这样看起来透明饼区就不存在了，只能看到不透明的饼区，刚好可以用来做展开的详细复合图。\n\n于是乎有了下面这个效果，具体代码实现和结果可以到 Gallery 里 [查看](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)。\n\n![实现效果缩略图](http://echarts.baidu.com/ecg-storage/img/xHJaWqD-1Q.png \"实现效果缩略图\")\n\n\n两个版本的思路出来效果之后，我都给了 GitHub Issues 上和我相同问题的那个哥们一个回复，他也回复了我，和大家一起思考问题的感觉还是很棒的。\n\n我发表在 Gallery 里的 [示例](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)，截至目前也已经有了二十多次的浏览量。\n\n这就是分享的力量，它不仅帮助别人，同时也在激励监督自己，让自己做的更好。\n\n这是我第一次体验到分享的乐趣，所以记录下来，鞭策自己以后更加努力！\n","slug":"echarts 之复合饼图的解决方案","published":1,"updated":"2019-03-06T10:55:03.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2ond0003zoq4mfnsnlhy","content":"<blockquote>\n<p>Echarts 是百度出品的功能强大的开源可视化库，由 Javascript 实现。<br>具有丰富的可视化类型，良好的跨平台特性，绚丽的视觉效果。<br>是大数据分析展示的有力武器</p>\n</blockquote>\n<p>老实说其实在我刚进入前端开发这个领域的时候就听说并使用了 Echarts ，那个时候还是 1.0 版本。</p>\n<p>最开始只是用到一些简单的条、饼、线图的组合展示，有时候我还会偷懒直接使用 <a href=\"http://tushuo.baidu.com/\" target=\"_blank\" rel=\"external\">图说</a> 的可视化功能进行操作，也还挺方便的，不用记那么多属性，但是现在 <a href=\"http://tushuo.baidu.com/\" target=\"_blank\" rel=\"external\">图说</a> 已经满足不了我更高级的需求了，有什么问题还是看文档更清晰。</p>\n<p>一直到今天，Echarts 已经出了 4.0 版本，功能和性能都有了非常的大的提升，也正因为这样，使用 Echarts 的人越来越多，Echarts 的社区也越来越活跃，活跃的社区又会促进 Echarts 生生不息的向前发展，形成一个良性循环。我想，这就是开源的魅力吧。</p>\n<p>最近在工作当中使用 Echarts 来深度挖掘和展示我手头的数据，发现有一个地方可能需要复合饼图来展示效果比较好。</p>\n<p>看了很多官方的实例，没有特别称手能直接拿来用的。GitHub 上 Echarts 的 Issues 区我也去搜了，看有没有人已经踩过坑。结果发现一天前，就有人提了一个和我一模一样的情景，问有没有用复合图来实现的方案，他也不知道怎么解决。</p>\n<p>哈哈，结果还是要靠自己了。</p>\n<p>于是乎看了一些 Echarts Gallery 上大家的奇思妙想之后，我也有了灵感。</p>\n<p>（这里穿插说一句，Echarts 升级之后社区真的变强了很多，不仅有很清晰的官方文档和实例，Gallery 里各方大神的脑洞也真的很精彩，比如我就看见过用 Echarts 做动画的，Flappy Bird，扫雷，还有一些酷炫的 3D 效果我就不说了，一打开那界面电脑风扇都开始呜呜响，哈哈，留待给以后慢慢发掘，有空专门再写一个收集贴。）</p>\n<h4 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h4><p>第一个方案是想画两个饼图，再用 series-&gt;type:graph 这个属性画两根线把两个饼图连起来。</p>\n<p>尝试了多次，发现不能通过点坐标的调整得到线的正确位置。我想要的是直角坐标，所以从直角坐标的角度看来，线的中心点是固定的，一直在 (0，0) ，不能上下左右移动。也就是说 y=kx+b 的 b 一直都是 0，只有线的斜率一直在变化，所以我判断那个坐标有可能是极坐标，所以才没有办法按直角坐标得到正确的结果。</p>\n<p>而且使用这种方式还有一个弊端，就是两个饼图连接点的坐标，其实不那么好确定，因为有可能随着百分比的变化而变化。所以最终，我放弃了这个方案。</p>\n<h4 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h4><p>换一个思路，采用之前在 Gallery 中看见过的环状图套饼图来实现。</p>\n<p>我看见过用透明环状饼区来占位的，这样看起来透明饼区就不存在了，只能看到不透明的饼区，刚好可以用来做展开的详细复合图。</p>\n<p>于是乎有了下面这个效果，具体代码实现和结果可以到 Gallery 里 <a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">查看</a>。</p>\n<p><img src=\"http://echarts.baidu.com/ecg-storage/img/xHJaWqD-1Q.png\" alt=\"实现效果缩略图\" title=\"实现效果缩略图\"></p>\n<p>两个版本的思路出来效果之后，我都给了 GitHub Issues 上和我相同问题的那个哥们一个回复，他也回复了我，和大家一起思考问题的感觉还是很棒的。</p>\n<p>我发表在 Gallery 里的 <a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">示例</a>，截至目前也已经有了二十多次的浏览量。</p>\n<p>这就是分享的力量，它不仅帮助别人，同时也在激励监督自己，让自己做的更好。</p>\n<p>这是我第一次体验到分享的乐趣，所以记录下来，鞭策自己以后更加努力！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Echarts 是百度出品的功能强大的开源可视化库，由 Javascript 实现。<br>具有丰富的可视化类型，良好的跨平台特性，绚丽的视觉效果。<br>是大数据分析展示的有力武器</p>\n</blockquote>\n<p>老实说其实在我刚进入前端开发这个领域的时候就听说并使用了 Echarts ，那个时候还是 1.0 版本。</p>\n<p>最开始只是用到一些简单的条、饼、线图的组合展示，有时候我还会偷懒直接使用 <a href=\"http://tushuo.baidu.com/\" target=\"_blank\" rel=\"external\">图说</a> 的可视化功能进行操作，也还挺方便的，不用记那么多属性，但是现在 <a href=\"http://tushuo.baidu.com/\" target=\"_blank\" rel=\"external\">图说</a> 已经满足不了我更高级的需求了，有什么问题还是看文档更清晰。</p>\n<p>一直到今天，Echarts 已经出了 4.0 版本，功能和性能都有了非常的大的提升，也正因为这样，使用 Echarts 的人越来越多，Echarts 的社区也越来越活跃，活跃的社区又会促进 Echarts 生生不息的向前发展，形成一个良性循环。我想，这就是开源的魅力吧。</p>\n<p>最近在工作当中使用 Echarts 来深度挖掘和展示我手头的数据，发现有一个地方可能需要复合饼图来展示效果比较好。</p>\n<p>看了很多官方的实例，没有特别称手能直接拿来用的。GitHub 上 Echarts 的 Issues 区我也去搜了，看有没有人已经踩过坑。结果发现一天前，就有人提了一个和我一模一样的情景，问有没有用复合图来实现的方案，他也不知道怎么解决。</p>\n<p>哈哈，结果还是要靠自己了。</p>\n<p>于是乎看了一些 Echarts Gallery 上大家的奇思妙想之后，我也有了灵感。</p>\n<p>（这里穿插说一句，Echarts 升级之后社区真的变强了很多，不仅有很清晰的官方文档和实例，Gallery 里各方大神的脑洞也真的很精彩，比如我就看见过用 Echarts 做动画的，Flappy Bird，扫雷，还有一些酷炫的 3D 效果我就不说了，一打开那界面电脑风扇都开始呜呜响，哈哈，留待给以后慢慢发掘，有空专门再写一个收集贴。）</p>\n<h4 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h4><p>第一个方案是想画两个饼图，再用 series-&gt;type:graph 这个属性画两根线把两个饼图连起来。</p>\n<p>尝试了多次，发现不能通过点坐标的调整得到线的正确位置。我想要的是直角坐标，所以从直角坐标的角度看来，线的中心点是固定的，一直在 (0，0) ，不能上下左右移动。也就是说 y=kx+b 的 b 一直都是 0，只有线的斜率一直在变化，所以我判断那个坐标有可能是极坐标，所以才没有办法按直角坐标得到正确的结果。</p>\n<p>而且使用这种方式还有一个弊端，就是两个饼图连接点的坐标，其实不那么好确定，因为有可能随着百分比的变化而变化。所以最终，我放弃了这个方案。</p>\n<h4 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h4><p>换一个思路，采用之前在 Gallery 中看见过的环状图套饼图来实现。</p>\n<p>我看见过用透明环状饼区来占位的，这样看起来透明饼区就不存在了，只能看到不透明的饼区，刚好可以用来做展开的详细复合图。</p>\n<p>于是乎有了下面这个效果，具体代码实现和结果可以到 Gallery 里 <a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">查看</a>。</p>\n<p><img src=\"http://echarts.baidu.com/ecg-storage/img/xHJaWqD-1Q.png\" alt=\"实现效果缩略图\" title=\"实现效果缩略图\"></p>\n<p>两个版本的思路出来效果之后，我都给了 GitHub Issues 上和我相同问题的那个哥们一个回复，他也回复了我，和大家一起思考问题的感觉还是很棒的。</p>\n<p>我发表在 Gallery 里的 <a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">示例</a>，截至目前也已经有了二十多次的浏览量。</p>\n<p>这就是分享的力量，它不仅帮助别人，同时也在激励监督自己，让自己做的更好。</p>\n<p>这是我第一次体验到分享的乐趣，所以记录下来，鞭策自己以后更加努力！</p>\n"},{"title":"常用图表总结","date":"2018-09-19T11:03:06.000Z","_content":"\n最近工作上遇到很多图表展示的情景，很多时候我们都会被长得类似的图表或者多种图一起用的情况给弄懵，一时间不知道图表究竟要传达怎样的含义，为了更好的使用图表传达我想要的效果，我在「墨者学院」上学习了一些相关内容。\n\n虽然蚂蚁金服团队总结的已经比较完善了，但对我来说，「墨者学院」有一个很大的问题就是它是按照图表的功能来进行分类的，而有些图表是有多个功能的，这样的话在很多分类中都能看到重复的图表，我觉得稍微有些乱，所以就来自己总结一下。\n\n先从最基础也是用的最多的几类图表开始总结吧，很多玫瑰图啊之类的其实平时用到的场景远没有基础的几类图表多。\n\n能用好、用对、读对几类基础的图表已经很厉害了。\n\n今天是各种柱状图的主场。\n\n首先要明确一点，柱状图一般都是用来展示对比数量的，通过柱子的长短，来代表数量的多少。\n\n只有在极少数的情况，柱子才用来展示占比情况，比如后面要说的堆叠柱状图。\n\n### 最普通的柱图\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaQanNF9iaQCdicf7VcbtyDu1ayq03mP8hxdKSjWhOYaPwNLIstoOZDSJQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n最普通的柱图相信每个人都很熟悉了，它是一种使用垂直或水平的柱子来显示类别之间数值比较的图表。其中一个轴表示需要对比的分类（通常是 X 轴），另一个轴代表相应的数值（通常是 Y 轴）。\n\n在柱子比较多的情况下，一般会使用水平的柱子，由于人们从左至右、从上至下的阅读习惯，这样做能避免由于数据量大而不便于阅读图的弊端。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfa2vU90gHgCbibeMgYibmqBWVAtfDJc6icT6KB4rrB5hcJJYs1giaW68hmLA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 柱图的引申\n\n#### 1.分组柱状图\n\n分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。\n\n可以用来对比不同分组内相同分类的大小，或者用来对比相同分组内不同分类的大小。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabUPff9bKxjjasIiaBpKm3UoylLeSK3vqsh5SGWekCqjuGA6VDiauaAPw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n#### 2.堆叠柱状图\n\n与并排显示分类的分组柱状图不同，堆叠柱状图将每个柱子进行分割以显示相同类型下各个数据的大小情况。\n\n它可以形象的展示一个大分类包含的每个小分类的数据，以及各个小分类的占比，显示的是单个项目与整体之间的关系。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabYJqkQBJB8l86RS0icrBmVPKlQtXldTPIaWFicxY5Ykb2kVyJM0B2JgQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n#### 3.双向柱状图\n\n双向柱状图，使用正向和反向的柱子显示类别之间的数值比较，可以明显的区分出两种方向，一般用的都是水平柱子。使用不同颜色的柱子，可以使反差更大一些。\n\n常见的收支图就是一种双向柱状图。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfau121qiazcLzwLVyD3gtKgu21eYFrNgjmW7NJT4fCial9LBAPwy4uLYCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 对比\n\n上面初步介绍了一下今天登场的柱图们，为了对它们的适用情景和注意的地方有个更明晰的认识，我总结了下面这张表格作为最终的对比，全是干货。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaB1XK0YNQogJQ1PaWtvgKTGc2VJQMUPPib41xN96pMPU6OCpBVZplOiaw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 扩展\n\n以上几种柱图之间，其实又可以互相组合展示，变成比较复杂的复合柱图，这种图所包含的信息量就比较大了，看着高大上，读起来也会费劲一些。\n\n比如说上面的收支图，其实是双向柱图和分组柱图的结合。\n\n而下面这张图，又是分组柱图和堆叠柱图的结合了。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaWRG4wfAgPA5kAH34zhGpNZk4lyLic888emVlCT92hOVG4EH32v2abSA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n这种扩展就比较灵活了，依照情景按需组合使用就可以了，不过也要注意读图的难易程度，不要做得过于复杂，让读者看不懂。\n\n————————————\n\nP.S.\n\n想直接学习的可以搜「墨者学院」\n\n本文所有图表来自「Echarts」\n\n转载请注明出处\n","source":"_posts/常用图表总结.md","raw":"---\ntitle: 常用图表总结\ndate: 2018-09-19 19:03:06\ntags: Tools\ncategories: Tools\n---\n\n最近工作上遇到很多图表展示的情景，很多时候我们都会被长得类似的图表或者多种图一起用的情况给弄懵，一时间不知道图表究竟要传达怎样的含义，为了更好的使用图表传达我想要的效果，我在「墨者学院」上学习了一些相关内容。\n\n虽然蚂蚁金服团队总结的已经比较完善了，但对我来说，「墨者学院」有一个很大的问题就是它是按照图表的功能来进行分类的，而有些图表是有多个功能的，这样的话在很多分类中都能看到重复的图表，我觉得稍微有些乱，所以就来自己总结一下。\n\n先从最基础也是用的最多的几类图表开始总结吧，很多玫瑰图啊之类的其实平时用到的场景远没有基础的几类图表多。\n\n能用好、用对、读对几类基础的图表已经很厉害了。\n\n今天是各种柱状图的主场。\n\n首先要明确一点，柱状图一般都是用来展示对比数量的，通过柱子的长短，来代表数量的多少。\n\n只有在极少数的情况，柱子才用来展示占比情况，比如后面要说的堆叠柱状图。\n\n### 最普通的柱图\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaQanNF9iaQCdicf7VcbtyDu1ayq03mP8hxdKSjWhOYaPwNLIstoOZDSJQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n最普通的柱图相信每个人都很熟悉了，它是一种使用垂直或水平的柱子来显示类别之间数值比较的图表。其中一个轴表示需要对比的分类（通常是 X 轴），另一个轴代表相应的数值（通常是 Y 轴）。\n\n在柱子比较多的情况下，一般会使用水平的柱子，由于人们从左至右、从上至下的阅读习惯，这样做能避免由于数据量大而不便于阅读图的弊端。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfa2vU90gHgCbibeMgYibmqBWVAtfDJc6icT6KB4rrB5hcJJYs1giaW68hmLA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 柱图的引申\n\n#### 1.分组柱状图\n\n分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。\n\n可以用来对比不同分组内相同分类的大小，或者用来对比相同分组内不同分类的大小。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabUPff9bKxjjasIiaBpKm3UoylLeSK3vqsh5SGWekCqjuGA6VDiauaAPw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n#### 2.堆叠柱状图\n\n与并排显示分类的分组柱状图不同，堆叠柱状图将每个柱子进行分割以显示相同类型下各个数据的大小情况。\n\n它可以形象的展示一个大分类包含的每个小分类的数据，以及各个小分类的占比，显示的是单个项目与整体之间的关系。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabYJqkQBJB8l86RS0icrBmVPKlQtXldTPIaWFicxY5Ykb2kVyJM0B2JgQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n#### 3.双向柱状图\n\n双向柱状图，使用正向和反向的柱子显示类别之间的数值比较，可以明显的区分出两种方向，一般用的都是水平柱子。使用不同颜色的柱子，可以使反差更大一些。\n\n常见的收支图就是一种双向柱状图。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfau121qiazcLzwLVyD3gtKgu21eYFrNgjmW7NJT4fCial9LBAPwy4uLYCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 对比\n\n上面初步介绍了一下今天登场的柱图们，为了对它们的适用情景和注意的地方有个更明晰的认识，我总结了下面这张表格作为最终的对比，全是干货。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaB1XK0YNQogJQ1PaWtvgKTGc2VJQMUPPib41xN96pMPU6OCpBVZplOiaw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n### 扩展\n\n以上几种柱图之间，其实又可以互相组合展示，变成比较复杂的复合柱图，这种图所包含的信息量就比较大了，看着高大上，读起来也会费劲一些。\n\n比如说上面的收支图，其实是双向柱图和分组柱图的结合。\n\n而下面这张图，又是分组柱图和堆叠柱图的结合了。\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaWRG4wfAgPA5kAH34zhGpNZk4lyLic888emVlCT92hOVG4EH32v2abSA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n这种扩展就比较灵活了，依照情景按需组合使用就可以了，不过也要注意读图的难易程度，不要做得过于复杂，让读者看不懂。\n\n————————————\n\nP.S.\n\n想直接学习的可以搜「墨者学院」\n\n本文所有图表来自「Echarts」\n\n转载请注明出处\n","slug":"常用图表总结","published":1,"updated":"2019-07-01T08:39:29.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2ooa0006zoq4j6v6n8iq","content":"<p>最近工作上遇到很多图表展示的情景，很多时候我们都会被长得类似的图表或者多种图一起用的情况给弄懵，一时间不知道图表究竟要传达怎样的含义，为了更好的使用图表传达我想要的效果，我在「墨者学院」上学习了一些相关内容。</p>\n<p>虽然蚂蚁金服团队总结的已经比较完善了，但对我来说，「墨者学院」有一个很大的问题就是它是按照图表的功能来进行分类的，而有些图表是有多个功能的，这样的话在很多分类中都能看到重复的图表，我觉得稍微有些乱，所以就来自己总结一下。</p>\n<p>先从最基础也是用的最多的几类图表开始总结吧，很多玫瑰图啊之类的其实平时用到的场景远没有基础的几类图表多。</p>\n<p>能用好、用对、读对几类基础的图表已经很厉害了。</p>\n<p>今天是各种柱状图的主场。</p>\n<p>首先要明确一点，柱状图一般都是用来展示对比数量的，通过柱子的长短，来代表数量的多少。</p>\n<p>只有在极少数的情况，柱子才用来展示占比情况，比如后面要说的堆叠柱状图。</p>\n<h3 id=\"最普通的柱图\"><a href=\"#最普通的柱图\" class=\"headerlink\" title=\"最普通的柱图\"></a>最普通的柱图</h3><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaQanNF9iaQCdicf7VcbtyDu1ayq03mP8hxdKSjWhOYaPwNLIstoOZDSJQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>最普通的柱图相信每个人都很熟悉了，它是一种使用垂直或水平的柱子来显示类别之间数值比较的图表。其中一个轴表示需要对比的分类（通常是 X 轴），另一个轴代表相应的数值（通常是 Y 轴）。</p>\n<p>在柱子比较多的情况下，一般会使用水平的柱子，由于人们从左至右、从上至下的阅读习惯，这样做能避免由于数据量大而不便于阅读图的弊端。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfa2vU90gHgCbibeMgYibmqBWVAtfDJc6icT6KB4rrB5hcJJYs1giaW68hmLA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"柱图的引申\"><a href=\"#柱图的引申\" class=\"headerlink\" title=\"柱图的引申\"></a>柱图的引申</h3><h4 id=\"1-分组柱状图\"><a href=\"#1-分组柱状图\" class=\"headerlink\" title=\"1.分组柱状图\"></a>1.分组柱状图</h4><p>分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。</p>\n<p>可以用来对比不同分组内相同分类的大小，或者用来对比相同分组内不同分类的大小。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabUPff9bKxjjasIiaBpKm3UoylLeSK3vqsh5SGWekCqjuGA6VDiauaAPw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h4 id=\"2-堆叠柱状图\"><a href=\"#2-堆叠柱状图\" class=\"headerlink\" title=\"2.堆叠柱状图\"></a>2.堆叠柱状图</h4><p>与并排显示分类的分组柱状图不同，堆叠柱状图将每个柱子进行分割以显示相同类型下各个数据的大小情况。</p>\n<p>它可以形象的展示一个大分类包含的每个小分类的数据，以及各个小分类的占比，显示的是单个项目与整体之间的关系。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabYJqkQBJB8l86RS0icrBmVPKlQtXldTPIaWFicxY5Ykb2kVyJM0B2JgQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h4 id=\"3-双向柱状图\"><a href=\"#3-双向柱状图\" class=\"headerlink\" title=\"3.双向柱状图\"></a>3.双向柱状图</h4><p>双向柱状图，使用正向和反向的柱子显示类别之间的数值比较，可以明显的区分出两种方向，一般用的都是水平柱子。使用不同颜色的柱子，可以使反差更大一些。</p>\n<p>常见的收支图就是一种双向柱状图。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfau121qiazcLzwLVyD3gtKgu21eYFrNgjmW7NJT4fCial9LBAPwy4uLYCw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>上面初步介绍了一下今天登场的柱图们，为了对它们的适用情景和注意的地方有个更明晰的认识，我总结了下面这张表格作为最终的对比，全是干货。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaB1XK0YNQogJQ1PaWtvgKTGc2VJQMUPPib41xN96pMPU6OCpBVZplOiaw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>以上几种柱图之间，其实又可以互相组合展示，变成比较复杂的复合柱图，这种图所包含的信息量就比较大了，看着高大上，读起来也会费劲一些。</p>\n<p>比如说上面的收支图，其实是双向柱图和分组柱图的结合。</p>\n<p>而下面这张图，又是分组柱图和堆叠柱图的结合了。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaWRG4wfAgPA5kAH34zhGpNZk4lyLic888emVlCT92hOVG4EH32v2abSA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>这种扩展就比较灵活了，依照情景按需组合使用就可以了，不过也要注意读图的难易程度，不要做得过于复杂，让读者看不懂。</p>\n<p>————————————</p>\n<p>P.S.</p>\n<p>想直接学习的可以搜「墨者学院」</p>\n<p>本文所有图表来自「Echarts」</p>\n<p>转载请注明出处</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近工作上遇到很多图表展示的情景，很多时候我们都会被长得类似的图表或者多种图一起用的情况给弄懵，一时间不知道图表究竟要传达怎样的含义，为了更好的使用图表传达我想要的效果，我在「墨者学院」上学习了一些相关内容。</p>\n<p>虽然蚂蚁金服团队总结的已经比较完善了，但对我来说，「墨者学院」有一个很大的问题就是它是按照图表的功能来进行分类的，而有些图表是有多个功能的，这样的话在很多分类中都能看到重复的图表，我觉得稍微有些乱，所以就来自己总结一下。</p>\n<p>先从最基础也是用的最多的几类图表开始总结吧，很多玫瑰图啊之类的其实平时用到的场景远没有基础的几类图表多。</p>\n<p>能用好、用对、读对几类基础的图表已经很厉害了。</p>\n<p>今天是各种柱状图的主场。</p>\n<p>首先要明确一点，柱状图一般都是用来展示对比数量的，通过柱子的长短，来代表数量的多少。</p>\n<p>只有在极少数的情况，柱子才用来展示占比情况，比如后面要说的堆叠柱状图。</p>\n<h3 id=\"最普通的柱图\"><a href=\"#最普通的柱图\" class=\"headerlink\" title=\"最普通的柱图\"></a>最普通的柱图</h3><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaQanNF9iaQCdicf7VcbtyDu1ayq03mP8hxdKSjWhOYaPwNLIstoOZDSJQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>最普通的柱图相信每个人都很熟悉了，它是一种使用垂直或水平的柱子来显示类别之间数值比较的图表。其中一个轴表示需要对比的分类（通常是 X 轴），另一个轴代表相应的数值（通常是 Y 轴）。</p>\n<p>在柱子比较多的情况下，一般会使用水平的柱子，由于人们从左至右、从上至下的阅读习惯，这样做能避免由于数据量大而不便于阅读图的弊端。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfa2vU90gHgCbibeMgYibmqBWVAtfDJc6icT6KB4rrB5hcJJYs1giaW68hmLA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"柱图的引申\"><a href=\"#柱图的引申\" class=\"headerlink\" title=\"柱图的引申\"></a>柱图的引申</h3><h4 id=\"1-分组柱状图\"><a href=\"#1-分组柱状图\" class=\"headerlink\" title=\"1.分组柱状图\"></a>1.分组柱状图</h4><p>分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。</p>\n<p>可以用来对比不同分组内相同分类的大小，或者用来对比相同分组内不同分类的大小。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabUPff9bKxjjasIiaBpKm3UoylLeSK3vqsh5SGWekCqjuGA6VDiauaAPw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h4 id=\"2-堆叠柱状图\"><a href=\"#2-堆叠柱状图\" class=\"headerlink\" title=\"2.堆叠柱状图\"></a>2.堆叠柱状图</h4><p>与并排显示分类的分组柱状图不同，堆叠柱状图将每个柱子进行分割以显示相同类型下各个数据的大小情况。</p>\n<p>它可以形象的展示一个大分类包含的每个小分类的数据，以及各个小分类的占比，显示的是单个项目与整体之间的关系。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfabYJqkQBJB8l86RS0icrBmVPKlQtXldTPIaWFicxY5Ykb2kVyJM0B2JgQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h4 id=\"3-双向柱状图\"><a href=\"#3-双向柱状图\" class=\"headerlink\" title=\"3.双向柱状图\"></a>3.双向柱状图</h4><p>双向柱状图，使用正向和反向的柱子显示类别之间的数值比较，可以明显的区分出两种方向，一般用的都是水平柱子。使用不同颜色的柱子，可以使反差更大一些。</p>\n<p>常见的收支图就是一种双向柱状图。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfau121qiazcLzwLVyD3gtKgu21eYFrNgjmW7NJT4fCial9LBAPwy4uLYCw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>上面初步介绍了一下今天登场的柱图们，为了对它们的适用情景和注意的地方有个更明晰的认识，我总结了下面这张表格作为最终的对比，全是干货。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaB1XK0YNQogJQ1PaWtvgKTGc2VJQMUPPib41xN96pMPU6OCpBVZplOiaw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>以上几种柱图之间，其实又可以互相组合展示，变成比较复杂的复合柱图，这种图所包含的信息量就比较大了，看着高大上，读起来也会费劲一些。</p>\n<p>比如说上面的收支图，其实是双向柱图和分组柱图的结合。</p>\n<p>而下面这张图，又是分组柱图和堆叠柱图的结合了。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsYefGO5kCx2UtYcRNtovWfaWRG4wfAgPA5kAH34zhGpNZk4lyLic888emVlCT92hOVG4EH32v2abSA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>这种扩展就比较灵活了，依照情景按需组合使用就可以了，不过也要注意读图的难易程度，不要做得过于复杂，让读者看不懂。</p>\n<p>————————————</p>\n<p>P.S.</p>\n<p>想直接学习的可以搜「墨者学院」</p>\n<p>本文所有图表来自「Echarts」</p>\n<p>转载请注明出处</p>\n"},{"title":"关于日课的计划","date":"2019-03-06T12:12:01.000Z","_content":"\n\n最近在读「曾国藩传」，其中有一个特别引起我注意的地方：\n\n曾国藩为了自己做一个圣人的志向，向别人求学方法，最后得到了一个看似十分笨拙的方法：决定每日写日课反思自己。\n\n什么是日课呢？\n\n就是今日干了什么，规定的任务是否完成，做错了什么，该怎么做，算是一个小的总结。\n\n日课也不必很长，短的不过百字，但必要的反思时一定要有的。\n\n这给了我很大的启发，因为我常想做人做事要在这个世界上留下痕迹，哪怕不为别人看，也要让自己的经历不白白的过去，这才算一生过的有意义。\n\n刚实习的时候，每天是要给领导发一个文档汇报今日学习了什么，有哪些进步的，现在翻回去看那时的自己，也觉得很有朝气，没有白白浪费时间。\n\n比起工作了许多年的现在，虽然能力确实比以前提高了不少，但日日记录的习惯却因为懒，或者忙的借口丢掉了。\n\n近几年工作里写年终总结的时候，常常感觉记不起自己一年里做了什么，每天获得了进步没有。有时候今年做的事情，我感觉仿佛好几年前做的一样，记忆的时间线非常的凌乱。\n\n开始写公众号以后，这样的情况稍稍好了一些（因为我会整理自己所学变成笔记以便日后分享或者使用），不过还是只能记得一些大事，很多零碎的小事还是无法记起。\n\n所以我决定也学习前人这个方法，每天写一个简短的总结，来记录一下今日的得失，毕竟时间一长，今天发生了什么就会被遗忘。\n\n很多事情都是以小见大，屡屡放过小节的人，最后也会在大事上吃亏吧。\n\n而且看似只有百字，日日坚持，实际也是一个很大的挑战。\n\n我知道有很多很厉害的号主，日日坚持分享输出，我暂时还没有那么多干货，只能先从日课开始，监督自己学习和积累了。\n\n但这样的日课很可能没什么营养，只能是自己留看学习的对象，所以我不会把它发在公众号上。公众号还是会继续分享更有价值的东西给大家。\n\n日课我会发在个人博客上，刚好因为写公众号，我的博客很少再更文了，写写简单的总结，也不至于荒废。\n\n\n\n---\n\n\n那么接下来就是今日份总结：\n\n\n今天看了一小时「曾国藩传」，晚上做了运动，公众号发文一篇，关于写日课的。\n\n其次还继续查找总结了调剂的一些学校，但是可用的不多。\n\n工作上，今天做了项目测试，虽然比开发容易，但是反而更累，什么时候能有更好的办法做测试呢？\n\n今天还被领导说做事不分重点，虽然有一定道理，但我也有我的委屈，不过想一想虽然其中有各种原因纠葛，至少领导说这话的当时还是自己做的有问题，工作中显得不够积极主动，刚巧被领导发现，还是要踏实努力工作。\n\n今天因为工作在知识星球的冲动提问也被删帖了，怪我自己的提问没有营养，所以以后发帖还是得注意些，多多积累自己的信用，不发没用的东西。\n\n今天在与人多说话这一点上做的还不够充分，停留在老样子。\n\n\n","source":"_posts/关于日课的计划.md","raw":"---\ntitle: 关于日课的计划\ntags: 生活 经历\ncategories: 个人经历\ndate: 2019-03-06 20:12:01\n---\n\n\n最近在读「曾国藩传」，其中有一个特别引起我注意的地方：\n\n曾国藩为了自己做一个圣人的志向，向别人求学方法，最后得到了一个看似十分笨拙的方法：决定每日写日课反思自己。\n\n什么是日课呢？\n\n就是今日干了什么，规定的任务是否完成，做错了什么，该怎么做，算是一个小的总结。\n\n日课也不必很长，短的不过百字，但必要的反思时一定要有的。\n\n这给了我很大的启发，因为我常想做人做事要在这个世界上留下痕迹，哪怕不为别人看，也要让自己的经历不白白的过去，这才算一生过的有意义。\n\n刚实习的时候，每天是要给领导发一个文档汇报今日学习了什么，有哪些进步的，现在翻回去看那时的自己，也觉得很有朝气，没有白白浪费时间。\n\n比起工作了许多年的现在，虽然能力确实比以前提高了不少，但日日记录的习惯却因为懒，或者忙的借口丢掉了。\n\n近几年工作里写年终总结的时候，常常感觉记不起自己一年里做了什么，每天获得了进步没有。有时候今年做的事情，我感觉仿佛好几年前做的一样，记忆的时间线非常的凌乱。\n\n开始写公众号以后，这样的情况稍稍好了一些（因为我会整理自己所学变成笔记以便日后分享或者使用），不过还是只能记得一些大事，很多零碎的小事还是无法记起。\n\n所以我决定也学习前人这个方法，每天写一个简短的总结，来记录一下今日的得失，毕竟时间一长，今天发生了什么就会被遗忘。\n\n很多事情都是以小见大，屡屡放过小节的人，最后也会在大事上吃亏吧。\n\n而且看似只有百字，日日坚持，实际也是一个很大的挑战。\n\n我知道有很多很厉害的号主，日日坚持分享输出，我暂时还没有那么多干货，只能先从日课开始，监督自己学习和积累了。\n\n但这样的日课很可能没什么营养，只能是自己留看学习的对象，所以我不会把它发在公众号上。公众号还是会继续分享更有价值的东西给大家。\n\n日课我会发在个人博客上，刚好因为写公众号，我的博客很少再更文了，写写简单的总结，也不至于荒废。\n\n\n\n---\n\n\n那么接下来就是今日份总结：\n\n\n今天看了一小时「曾国藩传」，晚上做了运动，公众号发文一篇，关于写日课的。\n\n其次还继续查找总结了调剂的一些学校，但是可用的不多。\n\n工作上，今天做了项目测试，虽然比开发容易，但是反而更累，什么时候能有更好的办法做测试呢？\n\n今天还被领导说做事不分重点，虽然有一定道理，但我也有我的委屈，不过想一想虽然其中有各种原因纠葛，至少领导说这话的当时还是自己做的有问题，工作中显得不够积极主动，刚巧被领导发现，还是要踏实努力工作。\n\n今天因为工作在知识星球的冲动提问也被删帖了，怪我自己的提问没有营养，所以以后发帖还是得注意些，多多积累自己的信用，不发没用的东西。\n\n今天在与人多说话这一点上做的还不够充分，停留在老样子。\n\n\n","slug":"关于日课的计划","published":1,"updated":"2019-03-06T12:13:01.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2ooo0007zoq4lbw6raxo","content":"<p>最近在读「曾国藩传」，其中有一个特别引起我注意的地方：</p>\n<p>曾国藩为了自己做一个圣人的志向，向别人求学方法，最后得到了一个看似十分笨拙的方法：决定每日写日课反思自己。</p>\n<p>什么是日课呢？</p>\n<p>就是今日干了什么，规定的任务是否完成，做错了什么，该怎么做，算是一个小的总结。</p>\n<p>日课也不必很长，短的不过百字，但必要的反思时一定要有的。</p>\n<p>这给了我很大的启发，因为我常想做人做事要在这个世界上留下痕迹，哪怕不为别人看，也要让自己的经历不白白的过去，这才算一生过的有意义。</p>\n<p>刚实习的时候，每天是要给领导发一个文档汇报今日学习了什么，有哪些进步的，现在翻回去看那时的自己，也觉得很有朝气，没有白白浪费时间。</p>\n<p>比起工作了许多年的现在，虽然能力确实比以前提高了不少，但日日记录的习惯却因为懒，或者忙的借口丢掉了。</p>\n<p>近几年工作里写年终总结的时候，常常感觉记不起自己一年里做了什么，每天获得了进步没有。有时候今年做的事情，我感觉仿佛好几年前做的一样，记忆的时间线非常的凌乱。</p>\n<p>开始写公众号以后，这样的情况稍稍好了一些（因为我会整理自己所学变成笔记以便日后分享或者使用），不过还是只能记得一些大事，很多零碎的小事还是无法记起。</p>\n<p>所以我决定也学习前人这个方法，每天写一个简短的总结，来记录一下今日的得失，毕竟时间一长，今天发生了什么就会被遗忘。</p>\n<p>很多事情都是以小见大，屡屡放过小节的人，最后也会在大事上吃亏吧。</p>\n<p>而且看似只有百字，日日坚持，实际也是一个很大的挑战。</p>\n<p>我知道有很多很厉害的号主，日日坚持分享输出，我暂时还没有那么多干货，只能先从日课开始，监督自己学习和积累了。</p>\n<p>但这样的日课很可能没什么营养，只能是自己留看学习的对象，所以我不会把它发在公众号上。公众号还是会继续分享更有价值的东西给大家。</p>\n<p>日课我会发在个人博客上，刚好因为写公众号，我的博客很少再更文了，写写简单的总结，也不至于荒废。</p>\n<hr>\n<p>那么接下来就是今日份总结：</p>\n<p>今天看了一小时「曾国藩传」，晚上做了运动，公众号发文一篇，关于写日课的。</p>\n<p>其次还继续查找总结了调剂的一些学校，但是可用的不多。</p>\n<p>工作上，今天做了项目测试，虽然比开发容易，但是反而更累，什么时候能有更好的办法做测试呢？</p>\n<p>今天还被领导说做事不分重点，虽然有一定道理，但我也有我的委屈，不过想一想虽然其中有各种原因纠葛，至少领导说这话的当时还是自己做的有问题，工作中显得不够积极主动，刚巧被领导发现，还是要踏实努力工作。</p>\n<p>今天因为工作在知识星球的冲动提问也被删帖了，怪我自己的提问没有营养，所以以后发帖还是得注意些，多多积累自己的信用，不发没用的东西。</p>\n<p>今天在与人多说话这一点上做的还不够充分，停留在老样子。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在读「曾国藩传」，其中有一个特别引起我注意的地方：</p>\n<p>曾国藩为了自己做一个圣人的志向，向别人求学方法，最后得到了一个看似十分笨拙的方法：决定每日写日课反思自己。</p>\n<p>什么是日课呢？</p>\n<p>就是今日干了什么，规定的任务是否完成，做错了什么，该怎么做，算是一个小的总结。</p>\n<p>日课也不必很长，短的不过百字，但必要的反思时一定要有的。</p>\n<p>这给了我很大的启发，因为我常想做人做事要在这个世界上留下痕迹，哪怕不为别人看，也要让自己的经历不白白的过去，这才算一生过的有意义。</p>\n<p>刚实习的时候，每天是要给领导发一个文档汇报今日学习了什么，有哪些进步的，现在翻回去看那时的自己，也觉得很有朝气，没有白白浪费时间。</p>\n<p>比起工作了许多年的现在，虽然能力确实比以前提高了不少，但日日记录的习惯却因为懒，或者忙的借口丢掉了。</p>\n<p>近几年工作里写年终总结的时候，常常感觉记不起自己一年里做了什么，每天获得了进步没有。有时候今年做的事情，我感觉仿佛好几年前做的一样，记忆的时间线非常的凌乱。</p>\n<p>开始写公众号以后，这样的情况稍稍好了一些（因为我会整理自己所学变成笔记以便日后分享或者使用），不过还是只能记得一些大事，很多零碎的小事还是无法记起。</p>\n<p>所以我决定也学习前人这个方法，每天写一个简短的总结，来记录一下今日的得失，毕竟时间一长，今天发生了什么就会被遗忘。</p>\n<p>很多事情都是以小见大，屡屡放过小节的人，最后也会在大事上吃亏吧。</p>\n<p>而且看似只有百字，日日坚持，实际也是一个很大的挑战。</p>\n<p>我知道有很多很厉害的号主，日日坚持分享输出，我暂时还没有那么多干货，只能先从日课开始，监督自己学习和积累了。</p>\n<p>但这样的日课很可能没什么营养，只能是自己留看学习的对象，所以我不会把它发在公众号上。公众号还是会继续分享更有价值的东西给大家。</p>\n<p>日课我会发在个人博客上，刚好因为写公众号，我的博客很少再更文了，写写简单的总结，也不至于荒废。</p>\n<hr>\n<p>那么接下来就是今日份总结：</p>\n<p>今天看了一小时「曾国藩传」，晚上做了运动，公众号发文一篇，关于写日课的。</p>\n<p>其次还继续查找总结了调剂的一些学校，但是可用的不多。</p>\n<p>工作上，今天做了项目测试，虽然比开发容易，但是反而更累，什么时候能有更好的办法做测试呢？</p>\n<p>今天还被领导说做事不分重点，虽然有一定道理，但我也有我的委屈，不过想一想虽然其中有各种原因纠葛，至少领导说这话的当时还是自己做的有问题，工作中显得不够积极主动，刚巧被领导发现，还是要踏实努力工作。</p>\n<p>今天因为工作在知识星球的冲动提问也被删帖了，怪我自己的提问没有营养，所以以后发帖还是得注意些，多多积累自己的信用，不发没用的东西。</p>\n<p>今天在与人多说话这一点上做的还不够充分，停留在老样子。</p>\n"},{"title":"程序员的 Tricks - 01","date":"2018-08-10T00:20:06.000Z","_content":"\n\n这两天坐地铁，听到站内广播：\n\n北京地铁站内不再开具纸质发票，有需要的乘客得去 「北京一卡通 APP」获取电子发票。\n\n得，无纸化了。\n\n这其实也算是城市无纸化办公模式的一个缩影。不知道大家注意过没有，现在很多发票都变成电子的了，申领操作也都可以通过网络以及各种电子设备进行。\n\n这也就从侧面反映出相比以前人们需要阅读大量的纸质文档，现在取而代之的是每天面对电脑、智能手机这些电子产品，我们每天都在接收、产生、传递着大量的电子化数据。\n\n作为一个前端码农，我们比普通人离这些电子化数据更近一些，每天都在和大量需要展示的数据打交道。但是，有些数据并不是拿来就能用的。\n\n由于各种各样的原因，我们每天工作的时间其实有一部分并不是在写代码，而是在整理这些未经处理不能拿来使用的数据。数据量小的话还好说，如果数据量大， 那简直要逼疯一个人啊！\n\n不过好在，我们是码农，遇到这种情况，第一个想到的就是：偷懒，这种重复又没有营养的工作，应当交给计算机去帮我们完成，我们的时间如此宝贵，还要用来多写几个 bug 呢。\n\n而这几天的我总是遇到上面说的「各种各样的原因」，所以也找到一些处理这些烦人数据的「偷懒」方法。想到以后可能还会源源不断的遇到这种事，而且大家在工作中难免也常会遇到，不如总结起来，形成一个栏目「程序员的 Tricks」，以后找的时候也方便一些。\n\n好了，扯了这么多，今天先分享第一个小 Trick 吧。\n\n---\n\n情景：\n\n> 从一个放了 48 张 3M 左右大小照片的单页 PPT 中提取出所需要的照片。\n\n听起来就很变态，48 张大图放在一张 PPT ，真不知道提供数据的人怎么想的，我连打开这个 PPT 文档电脑都快卡的不能动了好吗？还让我一张一张的保存？\n\n登时我就快炸了，然而机（懒）智（惰）的我，立刻搜索到了化解尴尬的办法，骚操作走一波：\n\n有这样一个一页放了 N 多大图的 PPT\n\n![ppt](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5PeKVd3DiautU3axnH7DbIuNtFKGam8ZQeomicxf2wR7R1pjFxdczblnQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"ppt\")\n\n\n1. 把 PPT 文件的后缀名改成压缩文件的后缀名「 .rar 」\n\n\n\n![rename](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5awe6CPqeyeqC3ic5Yg5kIvBn02e7Rk460Ng6b38oyYETpSkVyLJ5Nsg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"rename\")\n\n\n2. 把变成压缩文件的 PPT 解压到文件夹\n\n![unzip](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5sST1OwWibiao4mgjp6AmxkepOuxPHAxBveSqt04Kq922bR5eoMoJsZXg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"unzip\")\n\n\n3. 进入解压的文件夹，路径如下「 示例 > ppt > media 」，可以看到所有用在 PPT 中的图片，都在该文件夹中，直接按需获取即可\n\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5X5eiaicyHxzXgJjkIhtFgz0fSRmxxhHkovqKpPVib3R65CyrcwYjr7USg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n当然啦，这个方法不止适用于我遇到的这种变态情况，如果平时看到 PPT 中好的素材比较多，也可以通过这个方式来批量提取。\n\n\n还有更多的应用场景我就不赘述了，了解了这个方法，相信遇到别的情况之时，也能快速的想起并应用其中。\n\n","source":"_posts/程序员的 Tricks - 01.md","raw":"---\ntitle: 程序员的 Tricks - 01\ndate: 2018-08-10 08:20:06\ntags: Tools\ncategories: Tools\n---\n\n\n这两天坐地铁，听到站内广播：\n\n北京地铁站内不再开具纸质发票，有需要的乘客得去 「北京一卡通 APP」获取电子发票。\n\n得，无纸化了。\n\n这其实也算是城市无纸化办公模式的一个缩影。不知道大家注意过没有，现在很多发票都变成电子的了，申领操作也都可以通过网络以及各种电子设备进行。\n\n这也就从侧面反映出相比以前人们需要阅读大量的纸质文档，现在取而代之的是每天面对电脑、智能手机这些电子产品，我们每天都在接收、产生、传递着大量的电子化数据。\n\n作为一个前端码农，我们比普通人离这些电子化数据更近一些，每天都在和大量需要展示的数据打交道。但是，有些数据并不是拿来就能用的。\n\n由于各种各样的原因，我们每天工作的时间其实有一部分并不是在写代码，而是在整理这些未经处理不能拿来使用的数据。数据量小的话还好说，如果数据量大， 那简直要逼疯一个人啊！\n\n不过好在，我们是码农，遇到这种情况，第一个想到的就是：偷懒，这种重复又没有营养的工作，应当交给计算机去帮我们完成，我们的时间如此宝贵，还要用来多写几个 bug 呢。\n\n而这几天的我总是遇到上面说的「各种各样的原因」，所以也找到一些处理这些烦人数据的「偷懒」方法。想到以后可能还会源源不断的遇到这种事，而且大家在工作中难免也常会遇到，不如总结起来，形成一个栏目「程序员的 Tricks」，以后找的时候也方便一些。\n\n好了，扯了这么多，今天先分享第一个小 Trick 吧。\n\n---\n\n情景：\n\n> 从一个放了 48 张 3M 左右大小照片的单页 PPT 中提取出所需要的照片。\n\n听起来就很变态，48 张大图放在一张 PPT ，真不知道提供数据的人怎么想的，我连打开这个 PPT 文档电脑都快卡的不能动了好吗？还让我一张一张的保存？\n\n登时我就快炸了，然而机（懒）智（惰）的我，立刻搜索到了化解尴尬的办法，骚操作走一波：\n\n有这样一个一页放了 N 多大图的 PPT\n\n![ppt](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5PeKVd3DiautU3axnH7DbIuNtFKGam8ZQeomicxf2wR7R1pjFxdczblnQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"ppt\")\n\n\n1. 把 PPT 文件的后缀名改成压缩文件的后缀名「 .rar 」\n\n\n\n![rename](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5awe6CPqeyeqC3ic5Yg5kIvBn02e7Rk460Ng6b38oyYETpSkVyLJ5Nsg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"rename\")\n\n\n2. 把变成压缩文件的 PPT 解压到文件夹\n\n![unzip](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5sST1OwWibiao4mgjp6AmxkepOuxPHAxBveSqt04Kq922bR5eoMoJsZXg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"unzip\")\n\n\n3. 进入解压的文件夹，路径如下「 示例 > ppt > media 」，可以看到所有用在 PPT 中的图片，都在该文件夹中，直接按需获取即可\n\n\n![getAll](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5X5eiaicyHxzXgJjkIhtFgz0fSRmxxhHkovqKpPVib3R65CyrcwYjr7USg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"getAll\")\n\n\n当然啦，这个方法不止适用于我遇到的这种变态情况，如果平时看到 PPT 中好的素材比较多，也可以通过这个方式来批量提取。\n\n\n还有更多的应用场景我就不赘述了，了解了这个方法，相信遇到别的情况之时，也能快速的想起并应用其中。\n\n","slug":"程序员的 Tricks - 01","published":1,"updated":"2019-07-01T08:39:29.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2oqr000mzoq4nav0fnhj","content":"<p>这两天坐地铁，听到站内广播：</p>\n<p>北京地铁站内不再开具纸质发票，有需要的乘客得去 「北京一卡通 APP」获取电子发票。</p>\n<p>得，无纸化了。</p>\n<p>这其实也算是城市无纸化办公模式的一个缩影。不知道大家注意过没有，现在很多发票都变成电子的了，申领操作也都可以通过网络以及各种电子设备进行。</p>\n<p>这也就从侧面反映出相比以前人们需要阅读大量的纸质文档，现在取而代之的是每天面对电脑、智能手机这些电子产品，我们每天都在接收、产生、传递着大量的电子化数据。</p>\n<p>作为一个前端码农，我们比普通人离这些电子化数据更近一些，每天都在和大量需要展示的数据打交道。但是，有些数据并不是拿来就能用的。</p>\n<p>由于各种各样的原因，我们每天工作的时间其实有一部分并不是在写代码，而是在整理这些未经处理不能拿来使用的数据。数据量小的话还好说，如果数据量大， 那简直要逼疯一个人啊！</p>\n<p>不过好在，我们是码农，遇到这种情况，第一个想到的就是：偷懒，这种重复又没有营养的工作，应当交给计算机去帮我们完成，我们的时间如此宝贵，还要用来多写几个 bug 呢。</p>\n<p>而这几天的我总是遇到上面说的「各种各样的原因」，所以也找到一些处理这些烦人数据的「偷懒」方法。想到以后可能还会源源不断的遇到这种事，而且大家在工作中难免也常会遇到，不如总结起来，形成一个栏目「程序员的 Tricks」，以后找的时候也方便一些。</p>\n<p>好了，扯了这么多，今天先分享第一个小 Trick 吧。</p>\n<hr>\n<p>情景：</p>\n<blockquote>\n<p>从一个放了 48 张 3M 左右大小照片的单页 PPT 中提取出所需要的照片。</p>\n</blockquote>\n<p>听起来就很变态，48 张大图放在一张 PPT ，真不知道提供数据的人怎么想的，我连打开这个 PPT 文档电脑都快卡的不能动了好吗？还让我一张一张的保存？</p>\n<p>登时我就快炸了，然而机（懒）智（惰）的我，立刻搜索到了化解尴尬的办法，骚操作走一波：</p>\n<p>有这样一个一页放了 N 多大图的 PPT</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5PeKVd3DiautU3axnH7DbIuNtFKGam8ZQeomicxf2wR7R1pjFxdczblnQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"ppt\" title=\"ppt\"></p>\n<ol>\n<li>把 PPT 文件的后缀名改成压缩文件的后缀名「 .rar 」</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5awe6CPqeyeqC3ic5Yg5kIvBn02e7Rk460Ng6b38oyYETpSkVyLJ5Nsg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"rename\" title=\"rename\"></p>\n<ol>\n<li>把变成压缩文件的 PPT 解压到文件夹</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5sST1OwWibiao4mgjp6AmxkepOuxPHAxBveSqt04Kq922bR5eoMoJsZXg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"unzip\" title=\"unzip\"></p>\n<ol>\n<li>进入解压的文件夹，路径如下「 示例 &gt; ppt &gt; media 」，可以看到所有用在 PPT 中的图片，都在该文件夹中，直接按需获取即可</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5X5eiaicyHxzXgJjkIhtFgz0fSRmxxhHkovqKpPVib3R65CyrcwYjr7USg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>当然啦，这个方法不止适用于我遇到的这种变态情况，如果平时看到 PPT 中好的素材比较多，也可以通过这个方式来批量提取。</p>\n<p>还有更多的应用场景我就不赘述了，了解了这个方法，相信遇到别的情况之时，也能快速的想起并应用其中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这两天坐地铁，听到站内广播：</p>\n<p>北京地铁站内不再开具纸质发票，有需要的乘客得去 「北京一卡通 APP」获取电子发票。</p>\n<p>得，无纸化了。</p>\n<p>这其实也算是城市无纸化办公模式的一个缩影。不知道大家注意过没有，现在很多发票都变成电子的了，申领操作也都可以通过网络以及各种电子设备进行。</p>\n<p>这也就从侧面反映出相比以前人们需要阅读大量的纸质文档，现在取而代之的是每天面对电脑、智能手机这些电子产品，我们每天都在接收、产生、传递着大量的电子化数据。</p>\n<p>作为一个前端码农，我们比普通人离这些电子化数据更近一些，每天都在和大量需要展示的数据打交道。但是，有些数据并不是拿来就能用的。</p>\n<p>由于各种各样的原因，我们每天工作的时间其实有一部分并不是在写代码，而是在整理这些未经处理不能拿来使用的数据。数据量小的话还好说，如果数据量大， 那简直要逼疯一个人啊！</p>\n<p>不过好在，我们是码农，遇到这种情况，第一个想到的就是：偷懒，这种重复又没有营养的工作，应当交给计算机去帮我们完成，我们的时间如此宝贵，还要用来多写几个 bug 呢。</p>\n<p>而这几天的我总是遇到上面说的「各种各样的原因」，所以也找到一些处理这些烦人数据的「偷懒」方法。想到以后可能还会源源不断的遇到这种事，而且大家在工作中难免也常会遇到，不如总结起来，形成一个栏目「程序员的 Tricks」，以后找的时候也方便一些。</p>\n<p>好了，扯了这么多，今天先分享第一个小 Trick 吧。</p>\n<hr>\n<p>情景：</p>\n<blockquote>\n<p>从一个放了 48 张 3M 左右大小照片的单页 PPT 中提取出所需要的照片。</p>\n</blockquote>\n<p>听起来就很变态，48 张大图放在一张 PPT ，真不知道提供数据的人怎么想的，我连打开这个 PPT 文档电脑都快卡的不能动了好吗？还让我一张一张的保存？</p>\n<p>登时我就快炸了，然而机（懒）智（惰）的我，立刻搜索到了化解尴尬的办法，骚操作走一波：</p>\n<p>有这样一个一页放了 N 多大图的 PPT</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5PeKVd3DiautU3axnH7DbIuNtFKGam8ZQeomicxf2wR7R1pjFxdczblnQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"ppt\" title=\"ppt\"></p>\n<ol>\n<li>把 PPT 文件的后缀名改成压缩文件的后缀名「 .rar 」</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5awe6CPqeyeqC3ic5Yg5kIvBn02e7Rk460Ng6b38oyYETpSkVyLJ5Nsg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"rename\" title=\"rename\"></p>\n<ol>\n<li>把变成压缩文件的 PPT 解压到文件夹</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5sST1OwWibiao4mgjp6AmxkepOuxPHAxBveSqt04Kq922bR5eoMoJsZXg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"unzip\" title=\"unzip\"></p>\n<ol>\n<li>进入解压的文件夹，路径如下「 示例 &gt; ppt &gt; media 」，可以看到所有用在 PPT 中的图片，都在该文件夹中，直接按需获取即可</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32Nsbr66iaXxmcyHMg2agzW8um5X5eiaicyHxzXgJjkIhtFgz0fSRmxxhHkovqKpPVib3R65CyrcwYjr7USg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"getAll\" title=\"getAll\"></p>\n<p>当然啦，这个方法不止适用于我遇到的这种变态情况，如果平时看到 PPT 中好的素材比较多，也可以通过这个方式来批量提取。</p>\n<p>还有更多的应用场景我就不赘述了，了解了这个方法，相信遇到别的情况之时，也能快速的想起并应用其中。</p>\n"},{"title":"工具推荐——Cmder","date":"2018-07-22T14:39:06.000Z","_content":"\n做开发久了，每次在论坛上查找问题的时候总是看到用 Mac 或者其他非 Windows 环境开发者的终端截图，又漂亮又明晰，看着才有点像电影里演的 Hacker 那样高大上。然而大多数是用 Windows 自带终端的我们，看起来总是不那么酷炫，并且使用中确实有些必要的、能提升开发效率的功能是缺失的。\n\n鉴于此，我在查找了一番之后，发现了 Cmder 这个 Windows 环境下的终端神器，体验确实很不错，所以推荐给大家。\n\nCmder 的优点：\n\n- 是免安装压缩包，解压直接可用\n\n- 支持 Git 等命令\n\n- 支持多标签页\n\n- 支持自定义终端\n\n- 内置多种主题，支持自定义主题\n\n![官网](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsbUNQyUt5q81UUTLSrpTxichecwQvCQaZhjibvbO5ccT1wzx3ndibt91oUXjkica3fnYaQBtPibwpBO0CA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"官网\")\n\n上面这个图是我从 Cmder 的[官网](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)找的。\n\n不过本文到此还没有结束。\n\n平时开终端的时候都是直接用『Win+R』命令，然后运行 cmd 的，为了使用 Cmder 也能这样方便，不用每次都开启 .exe 文件，我们当然还要为 Cmder 配置环境变量啦。\n\n环境变量配置如下：\n\n先给系统变量中添加一个变量，值是解压后 Cmder.exe 所在的路径，然后将这个新添加的变量添加到系统 Path 中：\n\n![环境变量](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauosUHcdDyTPVpiae71jeYaezUdibmlzd3Bz3xIkNJjqrGonDnnHdC9jMQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"环境变量\")\n\n如果有需要，还要向用户变量的 Path 中添加解压后的 bin 路径，才能使配置生效。\n\n![Path](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"Path\")\n\n做好配置之后，可以直接使用『Win+R』命令，然后运行 cmder 就可以直接启动 Cmder 了。\n\n** 还有一个很重要的懒人配置 ** 就是平时开发的时候一般不会用命令行直接去找执行路径，而是在路径下『Shift+右击』快速打开该路径下的终端。\n\nCmder 也可以这样配置，我们只需要以管理员方式打开 Cmd 或者 PowerShell ，输入 『Cmder.exe /REGISTER ALL 』然后执行就可以了。之后我们就能在任意菜单下右击，点击『Cmder Here』 即可。\n\n最后效果就是这样的：\n\n![last](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauhvoFYbMuGt7nKIrQzKib9Dshibge4aJHDP5GwEtYAwqchj9T1ypQ74Bw/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"last\")\n\n\n其他的个性化设置，比如主题更换等我就不多啰嗦了，在Settings里大家都可以快速找到\n\n![settings](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauibR18p9Zf9wmK7B9uaicKRb89S5XriawBLPS6SMg1Zra7WIYqUmnicXGrQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"settings\")\n\n\n毕竟自己配置的才是最酷最好用最适合自己开发习惯的。\n\n","source":"_posts/工具推荐——Cmder.md","raw":"---\ntitle: 工具推荐——Cmder\ndate: 2018-07-22 22:39:06\ntags: Tools\ncategories: Tools\n---\n\n做开发久了，每次在论坛上查找问题的时候总是看到用 Mac 或者其他非 Windows 环境开发者的终端截图，又漂亮又明晰，看着才有点像电影里演的 Hacker 那样高大上。然而大多数是用 Windows 自带终端的我们，看起来总是不那么酷炫，并且使用中确实有些必要的、能提升开发效率的功能是缺失的。\n\n鉴于此，我在查找了一番之后，发现了 Cmder 这个 Windows 环境下的终端神器，体验确实很不错，所以推荐给大家。\n\nCmder 的优点：\n\n- 是免安装压缩包，解压直接可用\n\n- 支持 Git 等命令\n\n- 支持多标签页\n\n- 支持自定义终端\n\n- 内置多种主题，支持自定义主题\n\n![官网](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsbUNQyUt5q81UUTLSrpTxichecwQvCQaZhjibvbO5ccT1wzx3ndibt91oUXjkica3fnYaQBtPibwpBO0CA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"官网\")\n\n上面这个图是我从 Cmder 的[官网](http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q)找的。\n\n不过本文到此还没有结束。\n\n平时开终端的时候都是直接用『Win+R』命令，然后运行 cmd 的，为了使用 Cmder 也能这样方便，不用每次都开启 .exe 文件，我们当然还要为 Cmder 配置环境变量啦。\n\n环境变量配置如下：\n\n先给系统变量中添加一个变量，值是解压后 Cmder.exe 所在的路径，然后将这个新添加的变量添加到系统 Path 中：\n\n![环境变量](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauosUHcdDyTPVpiae71jeYaezUdibmlzd3Bz3xIkNJjqrGonDnnHdC9jMQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"环境变量\")\n\n如果有需要，还要向用户变量的 Path 中添加解压后的 bin 路径，才能使配置生效。\n\n![Path](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"Path\")\n\n做好配置之后，可以直接使用『Win+R』命令，然后运行 cmder 就可以直接启动 Cmder 了。\n\n** 还有一个很重要的懒人配置 ** 就是平时开发的时候一般不会用命令行直接去找执行路径，而是在路径下『Shift+右击』快速打开该路径下的终端。\n\nCmder 也可以这样配置，我们只需要以管理员方式打开 Cmd 或者 PowerShell ，输入 『Cmder.exe /REGISTER ALL 』然后执行就可以了。之后我们就能在任意菜单下右击，点击『Cmder Here』 即可。\n\n最后效果就是这样的：\n\n![last](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauhvoFYbMuGt7nKIrQzKib9Dshibge4aJHDP5GwEtYAwqchj9T1ypQ74Bw/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"last\")\n\n\n其他的个性化设置，比如主题更换等我就不多啰嗦了，在Settings里大家都可以快速找到\n\n![settings](https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauibR18p9Zf9wmK7B9uaicKRb89S5XriawBLPS6SMg1Zra7WIYqUmnicXGrQ/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"settings\")\n\n\n毕竟自己配置的才是最酷最好用最适合自己开发习惯的。\n\n","slug":"工具推荐——Cmder","published":1,"updated":"2019-07-01T08:08:19.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2orc000nzoq4wjl6eob0","content":"<p>做开发久了，每次在论坛上查找问题的时候总是看到用 Mac 或者其他非 Windows 环境开发者的终端截图，又漂亮又明晰，看着才有点像电影里演的 Hacker 那样高大上。然而大多数是用 Windows 自带终端的我们，看起来总是不那么酷炫，并且使用中确实有些必要的、能提升开发效率的功能是缺失的。</p>\n<p>鉴于此，我在查找了一番之后，发现了 Cmder 这个 Windows 环境下的终端神器，体验确实很不错，所以推荐给大家。</p>\n<p>Cmder 的优点：</p>\n<ul>\n<li><p>是免安装压缩包，解压直接可用</p>\n</li>\n<li><p>支持 Git 等命令</p>\n</li>\n<li><p>支持多标签页</p>\n</li>\n<li><p>支持自定义终端</p>\n</li>\n<li><p>内置多种主题，支持自定义主题</p>\n</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsbUNQyUt5q81UUTLSrpTxichecwQvCQaZhjibvbO5ccT1wzx3ndibt91oUXjkica3fnYaQBtPibwpBO0CA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"官网\" title=\"官网\"></p>\n<p>上面这个图是我从 Cmder 的<a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">官网</a>找的。</p>\n<p>不过本文到此还没有结束。</p>\n<p>平时开终端的时候都是直接用『Win+R』命令，然后运行 cmd 的，为了使用 Cmder 也能这样方便，不用每次都开启 .exe 文件，我们当然还要为 Cmder 配置环境变量啦。</p>\n<p>环境变量配置如下：</p>\n<p>先给系统变量中添加一个变量，值是解压后 Cmder.exe 所在的路径，然后将这个新添加的变量添加到系统 Path 中：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauosUHcdDyTPVpiae71jeYaezUdibmlzd3Bz3xIkNJjqrGonDnnHdC9jMQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"环境变量\" title=\"环境变量\"></p>\n<p>如果有需要，还要向用户变量的 Path 中添加解压后的 bin 路径，才能使配置生效。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"Path\" title=\"Path\"></p>\n<p>做好配置之后，可以直接使用『Win+R』命令，然后运行 cmder 就可以直接启动 Cmder 了。</p>\n<p><strong> 还有一个很重要的懒人配置 </strong> 就是平时开发的时候一般不会用命令行直接去找执行路径，而是在路径下『Shift+右击』快速打开该路径下的终端。</p>\n<p>Cmder 也可以这样配置，我们只需要以管理员方式打开 Cmd 或者 PowerShell ，输入 『Cmder.exe /REGISTER ALL 』然后执行就可以了。之后我们就能在任意菜单下右击，点击『Cmder Here』 即可。</p>\n<p>最后效果就是这样的：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauhvoFYbMuGt7nKIrQzKib9Dshibge4aJHDP5GwEtYAwqchj9T1ypQ74Bw/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"last\" title=\"last\"></p>\n<p>其他的个性化设置，比如主题更换等我就不多啰嗦了，在Settings里大家都可以快速找到</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauibR18p9Zf9wmK7B9uaicKRb89S5XriawBLPS6SMg1Zra7WIYqUmnicXGrQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"settings\" title=\"settings\"></p>\n<p>毕竟自己配置的才是最酷最好用最适合自己开发习惯的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>做开发久了，每次在论坛上查找问题的时候总是看到用 Mac 或者其他非 Windows 环境开发者的终端截图，又漂亮又明晰，看着才有点像电影里演的 Hacker 那样高大上。然而大多数是用 Windows 自带终端的我们，看起来总是不那么酷炫，并且使用中确实有些必要的、能提升开发效率的功能是缺失的。</p>\n<p>鉴于此，我在查找了一番之后，发现了 Cmder 这个 Windows 环境下的终端神器，体验确实很不错，所以推荐给大家。</p>\n<p>Cmder 的优点：</p>\n<ul>\n<li><p>是免安装压缩包，解压直接可用</p>\n</li>\n<li><p>支持 Git 等命令</p>\n</li>\n<li><p>支持多标签页</p>\n</li>\n<li><p>支持自定义终端</p>\n</li>\n<li><p>内置多种主题，支持自定义主题</p>\n</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsbUNQyUt5q81UUTLSrpTxichecwQvCQaZhjibvbO5ccT1wzx3ndibt91oUXjkica3fnYaQBtPibwpBO0CA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"官网\" title=\"官网\"></p>\n<p>上面这个图是我从 Cmder 的<a href=\"http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q\" target=\"_blank\" rel=\"external\">官网</a>找的。</p>\n<p>不过本文到此还没有结束。</p>\n<p>平时开终端的时候都是直接用『Win+R』命令，然后运行 cmd 的，为了使用 Cmder 也能这样方便，不用每次都开启 .exe 文件，我们当然还要为 Cmder 配置环境变量啦。</p>\n<p>环境变量配置如下：</p>\n<p>先给系统变量中添加一个变量，值是解压后 Cmder.exe 所在的路径，然后将这个新添加的变量添加到系统 Path 中：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauosUHcdDyTPVpiae71jeYaezUdibmlzd3Bz3xIkNJjqrGonDnnHdC9jMQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"环境变量\" title=\"环境变量\"></p>\n<p>如果有需要，还要向用户变量的 Path 中添加解压后的 bin 路径，才能使配置生效。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"Path\" title=\"Path\"></p>\n<p>做好配置之后，可以直接使用『Win+R』命令，然后运行 cmder 就可以直接启动 Cmder 了。</p>\n<p><strong> 还有一个很重要的懒人配置 </strong> 就是平时开发的时候一般不会用命令行直接去找执行路径，而是在路径下『Shift+右击』快速打开该路径下的终端。</p>\n<p>Cmder 也可以这样配置，我们只需要以管理员方式打开 Cmd 或者 PowerShell ，输入 『Cmder.exe /REGISTER ALL 』然后执行就可以了。之后我们就能在任意菜单下右击，点击『Cmder Here』 即可。</p>\n<p>最后效果就是这样的：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiau4wicrOglWTNeib1nuxxSGaw4Aezaf2RiaYqMcycrQLfSpDblCocA7YcGA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauhvoFYbMuGt7nKIrQzKib9Dshibge4aJHDP5GwEtYAwqchj9T1ypQ74Bw/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"last\" title=\"last\"></p>\n<p>其他的个性化设置，比如主题更换等我就不多啰嗦了，在Settings里大家都可以快速找到</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/Sv04OO32NsaAxh4B1b09eKmx1viaMgYiauibR18p9Zf9wmK7B9uaicKRb89S5XriawBLPS6SMg1Zra7WIYqUmnicXGrQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"settings\" title=\"settings\"></p>\n<p>毕竟自己配置的才是最酷最好用最适合自己开发习惯的。</p>\n"},{"title":"Javascript 之数组操作（上）","date":"2018-02-06T05:31:01.000Z","_content":"\n>从今天开始，将系统总结一系列 Javascript （Js）的原生操作。因为平时很多时候都是在使用现成的 Js 框架进行开发，（如 Jquery、AngularJs 等），对 Js 本身反倒没有太多关注。但万变不离其宗，相信对 Js 更深入、更全面的掌握，才是更好理解、运用上层框架的基础。\n  \n\n平时开发中遇到最多的数据处理，肯定不外乎就是处理大量的数组数据。\n\n不管是遍历还是数组整体操作，只有更熟练才能更高效的从海量数据中得到我们所需要的信息。\n\n## Js中的数组\n众所周知，Js 中所有的变量都是对象，所以数组也是一种对象。\n\n#### 数组的创建 \n简单介绍一下数组的创建，有三种形式：\n1. 第一种（最笨最普通的方法，平时都不会这么写）\n```\nvar myArray=new Array();\nmyArray[0]=1;\nmyArray[1]=2;\nmyArray[2]=3;\n```\n2. 第二种（平时也不会用到）\n```\nvar myArray=new Array(1,2,3);\n```\n3. 第三种（本人最常用到）\n```\nvar myArray=[1,2,3];\n//或者直接创建空数组\n\nvar myArray=[];\n//然后再进行一系列赋值操作\n```\n*注意*\n\nJs 的同一个数组中可以有不同类型的元素，虽然平时处理数据可能很少有这种情况出现，但是知道也没坏处\n\n\n#### 数组的访问\nJs 中的数组也遵循循秩访问，访问的时候直接通过下标就可以访问到对应元素，上面的例子其实已经提到，就不再啰嗦了\n\n\n## 数组的常用操作\n\n#### 数组的常用属性\n\n##### length  \n用来返回数组元素的个数，循环的时候可用作边界条件\n\n#### 数组的常用方法 \n这个部分比较长，所以打算按方法的使用频率降序分两次写完。  \n  \n    \n      \n      \n\n##### concat()\n\n  \n用于连接2或2+个数组，concat这个词语也是编程的专业术语，基本只会在讨论编程的时候才会出现。\n\n用法：\n```\nvar Array1=[a,b,c];\nvar Array2=[d,e];\nvar Array3=[f];\nvar result=Array1.concat(Array2,Array3);\n// result=[a,b,c,d,e,f]，是Array1的一个副本，一个新数组。\n// 这里的a，甚至可以是数组（在浏览器中可以解析）。\n\n// 也可以像下面这样\n\nvar result=Array1.concat(Array2,Array3,\"c\");\n// result=[a,b,c,d,e,f,\"c\"]\n```\n  \n \n  \n##### forEach()\n\n用于让数组中每个元素都执行一次回调函数。\n这个方法可以说是平时用的最多的了，不过，有些时候是属于滥用，我自己就因为对其他更方便的方法不了解，滥用 forEach() 去帮我处理数组。\n简单介绍一下用法：\n```\n// array.forEach(function(currentValue, ?index, ?arr), ?thisValue)\n\nvar Array1 = [4, 9, 16, 25];\nArray1.forEach(function(item,index){\n  console.log(\"[\"+index+\"]:\"+item);\n})\n// 控制台输出\n// [0]:4\n// [1]:9\n// [2]:16\n// [3]:25\n```\n*注意*  \n这个方法的返回值是 undefined，所以它不能进行链式操作之类的操作。而且这个方法在循环的过程中是无法终止的，如果想中途终止，不如用普通的循环操作。如果循环的目的是通过判断数组里的元素是否满足条件进而返回布尔值，不如改用 some() 或 every() 方法。\n\n\n##### map()\n\n用于让数组中每个元素都执行一次回调函数并返回新的数组。\n这个方法平时用也挺多，和 forEach() 稍稍有点像，不同的就在于它会返回所有回调函数要求返回的对象。\n简单介绍一下用法：\n```\n// array.map(function(currentValue,?index,?arr), ?thisValue)\n\nvar Array1 = [4, 9, 16, 25];\nvar Array1_doubled = Array1.map(function(item){\n   return num * 2;\n})\n// Array1_doubled 数组的值为： [8, 18, 32, 50]\n// Array1 数组未被修改： [4, 9, 16, 25]\n\n```\nmap() 可以应用的操作也很多，可以做[扩展了解](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)，在平时的开发中多用，才能熟练。\n\n\n##### every() VS some() includes()\n\n上面这三个都是比对查找操作，有些类似，所以放在一起讲了。\n\n不同的是，includes() 只能直接查找值，而 every() 和 some() 可以对数组中的元素进行更详尽的比对查找，可以用函数设置查找条件。\n\nevery() 和 some() 有点像 && 和 || 的关系\n\nevery() 有点像 &&，用于检测数组**所有元素**是否都符合指定条件（通过函数提供）。\n- 如果数组中检测到有一个元素**不满足**，则整个表达式返回 false ，且剩余的元素不会再进行检测。\n- 如果所有元素都满足条件，则返回 true。\n\n而 some() 有点像 ||，用于检测数组中是否有满足指定条件的元素（通过函数提供）。\n- 如果**有一个元素满足条件**，则表达式返回 true , 剩余的元素不会再执行检测。\n- 如果没有满足条件的元素，则返回 false。\n\n用法：\n```\n// arr.includes(要查找的值, ?从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。)\nvar site = ['runoob', 'google', 'taobao'];\nsite.includes('runoob'); // true \nsite.includes('baidu'); // false\n\n\n// every() 和 some() 这里只以some()举例\n\n// array.some(function(当前元素的值,?当期元素的索引值,?当期元素属于的数组对象),?thisValue)\n\n// 检测数组中是否有元素大于 18，只要有就返回 true\n\nvar ages = [3, 10, 18, 20];\nconsole.log(ages.some(function (age) {\n    return age >= 18;\n}))\n\n// 控制台输出 true\n\n```\n\n##### pop() push() VS shift() unshift()\n\n这一组也放在一起讲。\n\npop() 和 push() 是在数组的末尾进行添加、删除元素的操作。\n\n而shift() 和 unshift() 是在数组的头部进行添加、删除元素的操作。\n\n其余的细节两组都一样，所以只以 pop() 和 push() 为例讲一讲。\n\npop() 方法用于删除数组的最后一个元素并返回删除的元素。会改变数组的长度\n\npush() 方法用于在数组的末尾添加一个元素或多个元素，并返回数组的新长度。会改变数组的长度\n用法：\n```\n// array.push(item1, item2, ..., itemX)\n\nvar Array1 = [\"aa\", \"bb\", \"cc\", \"dd\"];\nArray1.push(\"ee\",\"ff\",\"gg\");\nconsole.log(Array1);\n\n// 控制台输出[\"aa\", \"bb\", \"cc\", \"dd\",\"ee\",\"ff\",\"gg\"]\n\n//array.pop()\n\nvar Array2 = [\"aa\", \"bb\", \"cc\", \"dd\"];\nvar a = Array2.pop();\nconsole.log(a);  // 控制台输出 \"dd\"\nconsole.log(Array2);  // 控制台输出[\"aa\", \"bb\", \"cc\"]\n\n```\n\n\n\n##### filter()\n\n顾名思义，filter() 算是一个过滤的方法，可以把源数组中符合条件的数据都放到一个新的数组中返回。\n对于空数组不会执行，这个方法也不会改变源数组。\n用法：\n```\n// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法\n// array.filter(function(currentValue,index,arr), thisValue)\n\nvar Array1 = [32, 33, 16, 40];\nconsole.log(Array1.filter(function(ele){\n   return ele >= 30;\n}));\n\n// 输出结果为: [32,33,40]\n\n```\n\n##### sort() VS reverse()\n\n这两个方法都是对数组进行排序的方法，所以也放在一组讲。\n\nreverse() 比较简单，是将原来的数组逆序，就不多说了。\n\n而 sort() 可以按照多种方式排序，又稍微有点复杂，直接贴一个 [MDN关于这个方法的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 吧，讲的更清楚一些\n\n\n\n\n##### find() VS findIndex()\n\n这两个都是查找元素操作。\n\nfind()返回的是满足条件（函数提供）的第一个元素，没有符合的返回 undefined。\n\n而findIndex()返回的是满足条件（函数提供）的第一个元素的位置，没有符合的返回 -1。\n对于空数组，它们都不会执行，这两个方法也不会改变数组的原始值。\n\n用法：\n```\n// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法\n// array.find(function(currentValue, index, arr),thisValue)\n// array.findIndex(function(currentValue, index, arr), thisValue)\n\nvar Array1 = [3, 19, 18, 20]; \nfunction condition(ele) {\n    return ele >= 18;\n}\nconsole.log(Array1.find(condition));\n// 控制台输出19\n\nconsole.log(Array1.findIndex(condition));\n// 控制台输出1\n\n```\n\n\n##### indexOf() VS lastIndexOf()\n\n这两个方法也类似，一个是查找某元素第一次出现在数组中的位置，另一个是查找某元素最后一次出现在数组中的位置。这个不同也意味着 indexOf() 查找的时候是从数组头开始查找，而 lastIndexOf() 查找的时候是从数组尾开始查找。\n如果没有符合的元素存在，则两者都返回 -1。\n\n用法：\n```\n// array.indexOf(查找的元素,?开始查找的位置。默认是数组起始位置)\n\n// array.lastIndexOf(查找的元素,?开始查找的位置。默认是数组的终止位置，一旦指定了这个值，相当于把数组截断从中间向前寻找元素最后一个出现的位置了)\n\nvar Array1 = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Orange\", \"Apple\"];\nconsole.log(Array1.lastIndexOf(\"Apple\", 4));\n\n// 以最难的一个情况为例，控制台输出的是2，即从 Array1[4]向前查找，\"Apple\"最后出现的位置\n\n```\n\n\n##### slice()\n\nslice用于从数组中截取需要的部分，并以新的对象返回，不会改变源数组。一般是对字符串处理的比较多。\n\n用法：\n```\n// array.slice(?start, ?end)\n// start 或 end 如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n// 注意选取区间的变化，有以下三种情况\n\narr.slice();\n// [0, end]\n\narr.slice(begin);\n// [begin, end]\n\narr.slice(begin, end);\n// [begin, end)\n\nvar Array1 = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"];\nvar Array2 = Array1.slice(-3,-1);\n\n// Array2 = [\"cc\", \"dd\"]\n```\n \n\n嗯，写的有点多，怕影响阅读体验。\n其他还有一些平时用的频率没那么高的方法，下篇再写。\n","source":"_posts/Javascript 之数组操作（上）.md","raw":"---\ntitle: Javascript 之数组操作（上）\ndate: 2018-02-06 13:31:01\ntags: Javascript\ncategories: Javascript\n---\n\n>从今天开始，将系统总结一系列 Javascript （Js）的原生操作。因为平时很多时候都是在使用现成的 Js 框架进行开发，（如 Jquery、AngularJs 等），对 Js 本身反倒没有太多关注。但万变不离其宗，相信对 Js 更深入、更全面的掌握，才是更好理解、运用上层框架的基础。\n  \n\n平时开发中遇到最多的数据处理，肯定不外乎就是处理大量的数组数据。\n\n不管是遍历还是数组整体操作，只有更熟练才能更高效的从海量数据中得到我们所需要的信息。\n\n## Js中的数组\n众所周知，Js 中所有的变量都是对象，所以数组也是一种对象。\n\n#### 数组的创建 \n简单介绍一下数组的创建，有三种形式：\n1. 第一种（最笨最普通的方法，平时都不会这么写）\n```\nvar myArray=new Array();\nmyArray[0]=1;\nmyArray[1]=2;\nmyArray[2]=3;\n```\n2. 第二种（平时也不会用到）\n```\nvar myArray=new Array(1,2,3);\n```\n3. 第三种（本人最常用到）\n```\nvar myArray=[1,2,3];\n//或者直接创建空数组\n\nvar myArray=[];\n//然后再进行一系列赋值操作\n```\n*注意*\n\nJs 的同一个数组中可以有不同类型的元素，虽然平时处理数据可能很少有这种情况出现，但是知道也没坏处\n\n\n#### 数组的访问\nJs 中的数组也遵循循秩访问，访问的时候直接通过下标就可以访问到对应元素，上面的例子其实已经提到，就不再啰嗦了\n\n\n## 数组的常用操作\n\n#### 数组的常用属性\n\n##### length  \n用来返回数组元素的个数，循环的时候可用作边界条件\n\n#### 数组的常用方法 \n这个部分比较长，所以打算按方法的使用频率降序分两次写完。  \n  \n    \n      \n      \n\n##### concat()\n\n  \n用于连接2或2+个数组，concat这个词语也是编程的专业术语，基本只会在讨论编程的时候才会出现。\n\n用法：\n```\nvar Array1=[a,b,c];\nvar Array2=[d,e];\nvar Array3=[f];\nvar result=Array1.concat(Array2,Array3);\n// result=[a,b,c,d,e,f]，是Array1的一个副本，一个新数组。\n// 这里的a，甚至可以是数组（在浏览器中可以解析）。\n\n// 也可以像下面这样\n\nvar result=Array1.concat(Array2,Array3,\"c\");\n// result=[a,b,c,d,e,f,\"c\"]\n```\n  \n \n  \n##### forEach()\n\n用于让数组中每个元素都执行一次回调函数。\n这个方法可以说是平时用的最多的了，不过，有些时候是属于滥用，我自己就因为对其他更方便的方法不了解，滥用 forEach() 去帮我处理数组。\n简单介绍一下用法：\n```\n// array.forEach(function(currentValue, ?index, ?arr), ?thisValue)\n\nvar Array1 = [4, 9, 16, 25];\nArray1.forEach(function(item,index){\n  console.log(\"[\"+index+\"]:\"+item);\n})\n// 控制台输出\n// [0]:4\n// [1]:9\n// [2]:16\n// [3]:25\n```\n*注意*  \n这个方法的返回值是 undefined，所以它不能进行链式操作之类的操作。而且这个方法在循环的过程中是无法终止的，如果想中途终止，不如用普通的循环操作。如果循环的目的是通过判断数组里的元素是否满足条件进而返回布尔值，不如改用 some() 或 every() 方法。\n\n\n##### map()\n\n用于让数组中每个元素都执行一次回调函数并返回新的数组。\n这个方法平时用也挺多，和 forEach() 稍稍有点像，不同的就在于它会返回所有回调函数要求返回的对象。\n简单介绍一下用法：\n```\n// array.map(function(currentValue,?index,?arr), ?thisValue)\n\nvar Array1 = [4, 9, 16, 25];\nvar Array1_doubled = Array1.map(function(item){\n   return num * 2;\n})\n// Array1_doubled 数组的值为： [8, 18, 32, 50]\n// Array1 数组未被修改： [4, 9, 16, 25]\n\n```\nmap() 可以应用的操作也很多，可以做[扩展了解](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)，在平时的开发中多用，才能熟练。\n\n\n##### every() VS some() includes()\n\n上面这三个都是比对查找操作，有些类似，所以放在一起讲了。\n\n不同的是，includes() 只能直接查找值，而 every() 和 some() 可以对数组中的元素进行更详尽的比对查找，可以用函数设置查找条件。\n\nevery() 和 some() 有点像 && 和 || 的关系\n\nevery() 有点像 &&，用于检测数组**所有元素**是否都符合指定条件（通过函数提供）。\n- 如果数组中检测到有一个元素**不满足**，则整个表达式返回 false ，且剩余的元素不会再进行检测。\n- 如果所有元素都满足条件，则返回 true。\n\n而 some() 有点像 ||，用于检测数组中是否有满足指定条件的元素（通过函数提供）。\n- 如果**有一个元素满足条件**，则表达式返回 true , 剩余的元素不会再执行检测。\n- 如果没有满足条件的元素，则返回 false。\n\n用法：\n```\n// arr.includes(要查找的值, ?从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。)\nvar site = ['runoob', 'google', 'taobao'];\nsite.includes('runoob'); // true \nsite.includes('baidu'); // false\n\n\n// every() 和 some() 这里只以some()举例\n\n// array.some(function(当前元素的值,?当期元素的索引值,?当期元素属于的数组对象),?thisValue)\n\n// 检测数组中是否有元素大于 18，只要有就返回 true\n\nvar ages = [3, 10, 18, 20];\nconsole.log(ages.some(function (age) {\n    return age >= 18;\n}))\n\n// 控制台输出 true\n\n```\n\n##### pop() push() VS shift() unshift()\n\n这一组也放在一起讲。\n\npop() 和 push() 是在数组的末尾进行添加、删除元素的操作。\n\n而shift() 和 unshift() 是在数组的头部进行添加、删除元素的操作。\n\n其余的细节两组都一样，所以只以 pop() 和 push() 为例讲一讲。\n\npop() 方法用于删除数组的最后一个元素并返回删除的元素。会改变数组的长度\n\npush() 方法用于在数组的末尾添加一个元素或多个元素，并返回数组的新长度。会改变数组的长度\n用法：\n```\n// array.push(item1, item2, ..., itemX)\n\nvar Array1 = [\"aa\", \"bb\", \"cc\", \"dd\"];\nArray1.push(\"ee\",\"ff\",\"gg\");\nconsole.log(Array1);\n\n// 控制台输出[\"aa\", \"bb\", \"cc\", \"dd\",\"ee\",\"ff\",\"gg\"]\n\n//array.pop()\n\nvar Array2 = [\"aa\", \"bb\", \"cc\", \"dd\"];\nvar a = Array2.pop();\nconsole.log(a);  // 控制台输出 \"dd\"\nconsole.log(Array2);  // 控制台输出[\"aa\", \"bb\", \"cc\"]\n\n```\n\n\n\n##### filter()\n\n顾名思义，filter() 算是一个过滤的方法，可以把源数组中符合条件的数据都放到一个新的数组中返回。\n对于空数组不会执行，这个方法也不会改变源数组。\n用法：\n```\n// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法\n// array.filter(function(currentValue,index,arr), thisValue)\n\nvar Array1 = [32, 33, 16, 40];\nconsole.log(Array1.filter(function(ele){\n   return ele >= 30;\n}));\n\n// 输出结果为: [32,33,40]\n\n```\n\n##### sort() VS reverse()\n\n这两个方法都是对数组进行排序的方法，所以也放在一组讲。\n\nreverse() 比较简单，是将原来的数组逆序，就不多说了。\n\n而 sort() 可以按照多种方式排序，又稍微有点复杂，直接贴一个 [MDN关于这个方法的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 吧，讲的更清楚一些\n\n\n\n\n##### find() VS findIndex()\n\n这两个都是查找元素操作。\n\nfind()返回的是满足条件（函数提供）的第一个元素，没有符合的返回 undefined。\n\n而findIndex()返回的是满足条件（函数提供）的第一个元素的位置，没有符合的返回 -1。\n对于空数组，它们都不会执行，这两个方法也不会改变数组的原始值。\n\n用法：\n```\n// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法\n// array.find(function(currentValue, index, arr),thisValue)\n// array.findIndex(function(currentValue, index, arr), thisValue)\n\nvar Array1 = [3, 19, 18, 20]; \nfunction condition(ele) {\n    return ele >= 18;\n}\nconsole.log(Array1.find(condition));\n// 控制台输出19\n\nconsole.log(Array1.findIndex(condition));\n// 控制台输出1\n\n```\n\n\n##### indexOf() VS lastIndexOf()\n\n这两个方法也类似，一个是查找某元素第一次出现在数组中的位置，另一个是查找某元素最后一次出现在数组中的位置。这个不同也意味着 indexOf() 查找的时候是从数组头开始查找，而 lastIndexOf() 查找的时候是从数组尾开始查找。\n如果没有符合的元素存在，则两者都返回 -1。\n\n用法：\n```\n// array.indexOf(查找的元素,?开始查找的位置。默认是数组起始位置)\n\n// array.lastIndexOf(查找的元素,?开始查找的位置。默认是数组的终止位置，一旦指定了这个值，相当于把数组截断从中间向前寻找元素最后一个出现的位置了)\n\nvar Array1 = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Orange\", \"Apple\"];\nconsole.log(Array1.lastIndexOf(\"Apple\", 4));\n\n// 以最难的一个情况为例，控制台输出的是2，即从 Array1[4]向前查找，\"Apple\"最后出现的位置\n\n```\n\n\n##### slice()\n\nslice用于从数组中截取需要的部分，并以新的对象返回，不会改变源数组。一般是对字符串处理的比较多。\n\n用法：\n```\n// array.slice(?start, ?end)\n// start 或 end 如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n// 注意选取区间的变化，有以下三种情况\n\narr.slice();\n// [0, end]\n\narr.slice(begin);\n// [begin, end]\n\narr.slice(begin, end);\n// [begin, end)\n\nvar Array1 = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"];\nvar Array2 = Array1.slice(-3,-1);\n\n// Array2 = [\"cc\", \"dd\"]\n```\n \n\n嗯，写的有点多，怕影响阅读体验。\n其他还有一些平时用的频率没那么高的方法，下篇再写。\n","slug":"Javascript 之数组操作（上）","published":1,"updated":"2018-03-15T07:34:36.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2orp000pzoq4m1s0sdfd","content":"<blockquote>\n<p>从今天开始，将系统总结一系列 Javascript （Js）的原生操作。因为平时很多时候都是在使用现成的 Js 框架进行开发，（如 Jquery、AngularJs 等），对 Js 本身反倒没有太多关注。但万变不离其宗，相信对 Js 更深入、更全面的掌握，才是更好理解、运用上层框架的基础。</p>\n</blockquote>\n<p>平时开发中遇到最多的数据处理，肯定不外乎就是处理大量的数组数据。</p>\n<p>不管是遍历还是数组整体操作，只有更熟练才能更高效的从海量数据中得到我们所需要的信息。</p>\n<h2 id=\"Js中的数组\"><a href=\"#Js中的数组\" class=\"headerlink\" title=\"Js中的数组\"></a>Js中的数组</h2><p>众所周知，Js 中所有的变量都是对象，所以数组也是一种对象。</p>\n<h4 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h4><p>简单介绍一下数组的创建，有三种形式：</p>\n<ol>\n<li><p>第一种（最笨最普通的方法，平时都不会这么写）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=new Array();</div><div class=\"line\">myArray[0]=1;</div><div class=\"line\">myArray[1]=2;</div><div class=\"line\">myArray[2]=3;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种（平时也不会用到）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=new Array(1,2,3);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种（本人最常用到）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=[1,2,3];</div><div class=\"line\">//或者直接创建空数组</div><div class=\"line\"></div><div class=\"line\">var myArray=[];</div><div class=\"line\">//然后再进行一系列赋值操作</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>注意</em></p>\n<p>Js 的同一个数组中可以有不同类型的元素，虽然平时处理数据可能很少有这种情况出现，但是知道也没坏处</p>\n<h4 id=\"数组的访问\"><a href=\"#数组的访问\" class=\"headerlink\" title=\"数组的访问\"></a>数组的访问</h4><p>Js 中的数组也遵循循秩访问，访问的时候直接通过下标就可以访问到对应元素，上面的例子其实已经提到，就不再啰嗦了</p>\n<h2 id=\"数组的常用操作\"><a href=\"#数组的常用操作\" class=\"headerlink\" title=\"数组的常用操作\"></a>数组的常用操作</h2><h4 id=\"数组的常用属性\"><a href=\"#数组的常用属性\" class=\"headerlink\" title=\"数组的常用属性\"></a>数组的常用属性</h4><h5 id=\"length\"><a href=\"#length\" class=\"headerlink\" title=\"length\"></a>length</h5><p>用来返回数组元素的个数，循环的时候可用作边界条件</p>\n<h4 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h4><p>这个部分比较长，所以打算按方法的使用频率降序分两次写完。  </p>\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><p>用于连接2或2+个数组，concat这个词语也是编程的专业术语，基本只会在讨论编程的时候才会出现。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Array1=[a,b,c];</div><div class=\"line\">var Array2=[d,e];</div><div class=\"line\">var Array3=[f];</div><div class=\"line\">var result=Array1.concat(Array2,Array3);</div><div class=\"line\">// result=[a,b,c,d,e,f]，是Array1的一个副本，一个新数组。</div><div class=\"line\">// 这里的a，甚至可以是数组（在浏览器中可以解析）。</div><div class=\"line\"></div><div class=\"line\">// 也可以像下面这样</div><div class=\"line\"></div><div class=\"line\">var result=Array1.concat(Array2,Array3,&quot;c&quot;);</div><div class=\"line\">// result=[a,b,c,d,e,f,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h5><p>用于让数组中每个元素都执行一次回调函数。<br>这个方法可以说是平时用的最多的了，不过，有些时候是属于滥用，我自己就因为对其他更方便的方法不了解，滥用 forEach() 去帮我处理数组。<br>简单介绍一下用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.forEach(function(currentValue, ?index, ?arr), ?thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [4, 9, 16, 25];</div><div class=\"line\">Array1.forEach(function(item,index)&#123;</div><div class=\"line\">  console.log(&quot;[&quot;+index+&quot;]:&quot;+item);</div><div class=\"line\">&#125;)</div><div class=\"line\">// 控制台输出</div><div class=\"line\">// [0]:4</div><div class=\"line\">// [1]:9</div><div class=\"line\">// [2]:16</div><div class=\"line\">// [3]:25</div></pre></td></tr></table></figure></p>\n<p><em>注意</em><br>这个方法的返回值是 undefined，所以它不能进行链式操作之类的操作。而且这个方法在循环的过程中是无法终止的，如果想中途终止，不如用普通的循环操作。如果循环的目的是通过判断数组里的元素是否满足条件进而返回布尔值，不如改用 some() 或 every() 方法。</p>\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><p>用于让数组中每个元素都执行一次回调函数并返回新的数组。<br>这个方法平时用也挺多，和 forEach() 稍稍有点像，不同的就在于它会返回所有回调函数要求返回的对象。<br>简单介绍一下用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.map(function(currentValue,?index,?arr), ?thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [4, 9, 16, 25];</div><div class=\"line\">var Array1_doubled = Array1.map(function(item)&#123;</div><div class=\"line\">   return num * 2;</div><div class=\"line\">&#125;)</div><div class=\"line\">// Array1_doubled 数组的值为： [8, 18, 32, 50]</div><div class=\"line\">// Array1 数组未被修改： [4, 9, 16, 25]</div></pre></td></tr></table></figure></p>\n<p>map() 可以应用的操作也很多，可以做<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">扩展了解</a>，在平时的开发中多用，才能熟练。</p>\n<h5 id=\"every-VS-some-includes\"><a href=\"#every-VS-some-includes\" class=\"headerlink\" title=\"every() VS some() includes()\"></a>every() VS some() includes()</h5><p>上面这三个都是比对查找操作，有些类似，所以放在一起讲了。</p>\n<p>不同的是，includes() 只能直接查找值，而 every() 和 some() 可以对数组中的元素进行更详尽的比对查找，可以用函数设置查找条件。</p>\n<p>every() 和 some() 有点像 &amp;&amp; 和 || 的关系</p>\n<p>every() 有点像 &amp;&amp;，用于检测数组<strong>所有元素</strong>是否都符合指定条件（通过函数提供）。</p>\n<ul>\n<li>如果数组中检测到有一个元素<strong>不满足</strong>，则整个表达式返回 false ，且剩余的元素不会再进行检测。</li>\n<li>如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<p>而 some() 有点像 ||，用于检测数组中是否有满足指定条件的元素（通过函数提供）。</p>\n<ul>\n<li>如果<strong>有一个元素满足条件</strong>，则表达式返回 true , 剩余的元素不会再执行检测。</li>\n<li>如果没有满足条件的元素，则返回 false。</li>\n</ul>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// arr.includes(要查找的值, ?从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。)</div><div class=\"line\">var site = [&apos;runoob&apos;, &apos;google&apos;, &apos;taobao&apos;];</div><div class=\"line\">site.includes(&apos;runoob&apos;); // true </div><div class=\"line\">site.includes(&apos;baidu&apos;); // false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// every() 和 some() 这里只以some()举例</div><div class=\"line\"></div><div class=\"line\">// array.some(function(当前元素的值,?当期元素的索引值,?当期元素属于的数组对象),?thisValue)</div><div class=\"line\"></div><div class=\"line\">// 检测数组中是否有元素大于 18，只要有就返回 true</div><div class=\"line\"></div><div class=\"line\">var ages = [3, 10, 18, 20];</div><div class=\"line\">console.log(ages.some(function (age) &#123;</div><div class=\"line\">    return age &gt;= 18;</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">// 控制台输出 true</div></pre></td></tr></table></figure></p>\n<h5 id=\"pop-push-VS-shift-unshift\"><a href=\"#pop-push-VS-shift-unshift\" class=\"headerlink\" title=\"pop() push() VS shift() unshift()\"></a>pop() push() VS shift() unshift()</h5><p>这一组也放在一起讲。</p>\n<p>pop() 和 push() 是在数组的末尾进行添加、删除元素的操作。</p>\n<p>而shift() 和 unshift() 是在数组的头部进行添加、删除元素的操作。</p>\n<p>其余的细节两组都一样，所以只以 pop() 和 push() 为例讲一讲。</p>\n<p>pop() 方法用于删除数组的最后一个元素并返回删除的元素。会改变数组的长度</p>\n<p>push() 方法用于在数组的末尾添加一个元素或多个元素，并返回数组的新长度。会改变数组的长度<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.push(item1, item2, ..., itemX)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class=\"line\">Array1.push(&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;);</div><div class=\"line\">console.log(Array1);</div><div class=\"line\"></div><div class=\"line\">// 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;,&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;]</div><div class=\"line\"></div><div class=\"line\">//array.pop()</div><div class=\"line\"></div><div class=\"line\">var Array2 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class=\"line\">var a = Array2.pop();</div><div class=\"line\">console.log(a);  // 控制台输出 &quot;dd&quot;</div><div class=\"line\">console.log(Array2);  // 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><p>顾名思义，filter() 算是一个过滤的方法，可以把源数组中符合条件的数据都放到一个新的数组中返回。<br>对于空数组不会执行，这个方法也不会改变源数组。<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class=\"line\">// array.filter(function(currentValue,index,arr), thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [32, 33, 16, 40];</div><div class=\"line\">console.log(Array1.filter(function(ele)&#123;</div><div class=\"line\">   return ele &gt;= 30;</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">// 输出结果为: [32,33,40]</div></pre></td></tr></table></figure></p>\n<h5 id=\"sort-VS-reverse\"><a href=\"#sort-VS-reverse\" class=\"headerlink\" title=\"sort() VS reverse()\"></a>sort() VS reverse()</h5><p>这两个方法都是对数组进行排序的方法，所以也放在一组讲。</p>\n<p>reverse() 比较简单，是将原来的数组逆序，就不多说了。</p>\n<p>而 sort() 可以按照多种方式排序，又稍微有点复杂，直接贴一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">MDN关于这个方法的文档</a> 吧，讲的更清楚一些</p>\n<h5 id=\"find-VS-findIndex\"><a href=\"#find-VS-findIndex\" class=\"headerlink\" title=\"find() VS findIndex()\"></a>find() VS findIndex()</h5><p>这两个都是查找元素操作。</p>\n<p>find()返回的是满足条件（函数提供）的第一个元素，没有符合的返回 undefined。</p>\n<p>而findIndex()返回的是满足条件（函数提供）的第一个元素的位置，没有符合的返回 -1。<br>对于空数组，它们都不会执行，这两个方法也不会改变数组的原始值。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class=\"line\">// array.find(function(currentValue, index, arr),thisValue)</div><div class=\"line\">// array.findIndex(function(currentValue, index, arr), thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [3, 19, 18, 20]; </div><div class=\"line\">function condition(ele) &#123;</div><div class=\"line\">    return ele &gt;= 18;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Array1.find(condition));</div><div class=\"line\">// 控制台输出19</div><div class=\"line\"></div><div class=\"line\">console.log(Array1.findIndex(condition));</div><div class=\"line\">// 控制台输出1</div></pre></td></tr></table></figure></p>\n<h5 id=\"indexOf-VS-lastIndexOf\"><a href=\"#indexOf-VS-lastIndexOf\" class=\"headerlink\" title=\"indexOf() VS lastIndexOf()\"></a>indexOf() VS lastIndexOf()</h5><p>这两个方法也类似，一个是查找某元素第一次出现在数组中的位置，另一个是查找某元素最后一次出现在数组中的位置。这个不同也意味着 indexOf() 查找的时候是从数组头开始查找，而 lastIndexOf() 查找的时候是从数组尾开始查找。<br>如果没有符合的元素存在，则两者都返回 -1。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.indexOf(查找的元素,?开始查找的位置。默认是数组起始位置)</div><div class=\"line\"></div><div class=\"line\">// array.lastIndexOf(查找的元素,?开始查找的位置。默认是数组的终止位置，一旦指定了这个值，相当于把数组截断从中间向前寻找元素最后一个出现的位置了)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Orange&quot;, &quot;Apple&quot;];</div><div class=\"line\">console.log(Array1.lastIndexOf(&quot;Apple&quot;, 4));</div><div class=\"line\"></div><div class=\"line\">// 以最难的一个情况为例，控制台输出的是2，即从 Array1[4]向前查找，&quot;Apple&quot;最后出现的位置</div></pre></td></tr></table></figure></p>\n<h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h5><p>slice用于从数组中截取需要的部分，并以新的对象返回，不会改变源数组。一般是对字符串处理的比较多。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.slice(?start, ?end)</div><div class=\"line\">// start 或 end 如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</div><div class=\"line\">// 注意选取区间的变化，有以下三种情况</div><div class=\"line\"></div><div class=\"line\">arr.slice();</div><div class=\"line\">// [0, end]</div><div class=\"line\"></div><div class=\"line\">arr.slice(begin);</div><div class=\"line\">// [begin, end]</div><div class=\"line\"></div><div class=\"line\">arr.slice(begin, end);</div><div class=\"line\">// [begin, end)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;];</div><div class=\"line\">var Array2 = Array1.slice(-3,-1);</div><div class=\"line\"></div><div class=\"line\">// Array2 = [&quot;cc&quot;, &quot;dd&quot;]</div></pre></td></tr></table></figure></p>\n<p>嗯，写的有点多，怕影响阅读体验。<br>其他还有一些平时用的频率没那么高的方法，下篇再写。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从今天开始，将系统总结一系列 Javascript （Js）的原生操作。因为平时很多时候都是在使用现成的 Js 框架进行开发，（如 Jquery、AngularJs 等），对 Js 本身反倒没有太多关注。但万变不离其宗，相信对 Js 更深入、更全面的掌握，才是更好理解、运用上层框架的基础。</p>\n</blockquote>\n<p>平时开发中遇到最多的数据处理，肯定不外乎就是处理大量的数组数据。</p>\n<p>不管是遍历还是数组整体操作，只有更熟练才能更高效的从海量数据中得到我们所需要的信息。</p>\n<h2 id=\"Js中的数组\"><a href=\"#Js中的数组\" class=\"headerlink\" title=\"Js中的数组\"></a>Js中的数组</h2><p>众所周知，Js 中所有的变量都是对象，所以数组也是一种对象。</p>\n<h4 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h4><p>简单介绍一下数组的创建，有三种形式：</p>\n<ol>\n<li><p>第一种（最笨最普通的方法，平时都不会这么写）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=new Array();</div><div class=\"line\">myArray[0]=1;</div><div class=\"line\">myArray[1]=2;</div><div class=\"line\">myArray[2]=3;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种（平时也不会用到）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=new Array(1,2,3);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种（本人最常用到）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myArray=[1,2,3];</div><div class=\"line\">//或者直接创建空数组</div><div class=\"line\"></div><div class=\"line\">var myArray=[];</div><div class=\"line\">//然后再进行一系列赋值操作</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>注意</em></p>\n<p>Js 的同一个数组中可以有不同类型的元素，虽然平时处理数据可能很少有这种情况出现，但是知道也没坏处</p>\n<h4 id=\"数组的访问\"><a href=\"#数组的访问\" class=\"headerlink\" title=\"数组的访问\"></a>数组的访问</h4><p>Js 中的数组也遵循循秩访问，访问的时候直接通过下标就可以访问到对应元素，上面的例子其实已经提到，就不再啰嗦了</p>\n<h2 id=\"数组的常用操作\"><a href=\"#数组的常用操作\" class=\"headerlink\" title=\"数组的常用操作\"></a>数组的常用操作</h2><h4 id=\"数组的常用属性\"><a href=\"#数组的常用属性\" class=\"headerlink\" title=\"数组的常用属性\"></a>数组的常用属性</h4><h5 id=\"length\"><a href=\"#length\" class=\"headerlink\" title=\"length\"></a>length</h5><p>用来返回数组元素的个数，循环的时候可用作边界条件</p>\n<h4 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h4><p>这个部分比较长，所以打算按方法的使用频率降序分两次写完。  </p>\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><p>用于连接2或2+个数组，concat这个词语也是编程的专业术语，基本只会在讨论编程的时候才会出现。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Array1=[a,b,c];</div><div class=\"line\">var Array2=[d,e];</div><div class=\"line\">var Array3=[f];</div><div class=\"line\">var result=Array1.concat(Array2,Array3);</div><div class=\"line\">// result=[a,b,c,d,e,f]，是Array1的一个副本，一个新数组。</div><div class=\"line\">// 这里的a，甚至可以是数组（在浏览器中可以解析）。</div><div class=\"line\"></div><div class=\"line\">// 也可以像下面这样</div><div class=\"line\"></div><div class=\"line\">var result=Array1.concat(Array2,Array3,&quot;c&quot;);</div><div class=\"line\">// result=[a,b,c,d,e,f,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h5><p>用于让数组中每个元素都执行一次回调函数。<br>这个方法可以说是平时用的最多的了，不过，有些时候是属于滥用，我自己就因为对其他更方便的方法不了解，滥用 forEach() 去帮我处理数组。<br>简单介绍一下用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.forEach(function(currentValue, ?index, ?arr), ?thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [4, 9, 16, 25];</div><div class=\"line\">Array1.forEach(function(item,index)&#123;</div><div class=\"line\">  console.log(&quot;[&quot;+index+&quot;]:&quot;+item);</div><div class=\"line\">&#125;)</div><div class=\"line\">// 控制台输出</div><div class=\"line\">// [0]:4</div><div class=\"line\">// [1]:9</div><div class=\"line\">// [2]:16</div><div class=\"line\">// [3]:25</div></pre></td></tr></table></figure></p>\n<p><em>注意</em><br>这个方法的返回值是 undefined，所以它不能进行链式操作之类的操作。而且这个方法在循环的过程中是无法终止的，如果想中途终止，不如用普通的循环操作。如果循环的目的是通过判断数组里的元素是否满足条件进而返回布尔值，不如改用 some() 或 every() 方法。</p>\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><p>用于让数组中每个元素都执行一次回调函数并返回新的数组。<br>这个方法平时用也挺多，和 forEach() 稍稍有点像，不同的就在于它会返回所有回调函数要求返回的对象。<br>简单介绍一下用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.map(function(currentValue,?index,?arr), ?thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [4, 9, 16, 25];</div><div class=\"line\">var Array1_doubled = Array1.map(function(item)&#123;</div><div class=\"line\">   return num * 2;</div><div class=\"line\">&#125;)</div><div class=\"line\">// Array1_doubled 数组的值为： [8, 18, 32, 50]</div><div class=\"line\">// Array1 数组未被修改： [4, 9, 16, 25]</div></pre></td></tr></table></figure></p>\n<p>map() 可以应用的操作也很多，可以做<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">扩展了解</a>，在平时的开发中多用，才能熟练。</p>\n<h5 id=\"every-VS-some-includes\"><a href=\"#every-VS-some-includes\" class=\"headerlink\" title=\"every() VS some() includes()\"></a>every() VS some() includes()</h5><p>上面这三个都是比对查找操作，有些类似，所以放在一起讲了。</p>\n<p>不同的是，includes() 只能直接查找值，而 every() 和 some() 可以对数组中的元素进行更详尽的比对查找，可以用函数设置查找条件。</p>\n<p>every() 和 some() 有点像 &amp;&amp; 和 || 的关系</p>\n<p>every() 有点像 &amp;&amp;，用于检测数组<strong>所有元素</strong>是否都符合指定条件（通过函数提供）。</p>\n<ul>\n<li>如果数组中检测到有一个元素<strong>不满足</strong>，则整个表达式返回 false ，且剩余的元素不会再进行检测。</li>\n<li>如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<p>而 some() 有点像 ||，用于检测数组中是否有满足指定条件的元素（通过函数提供）。</p>\n<ul>\n<li>如果<strong>有一个元素满足条件</strong>，则表达式返回 true , 剩余的元素不会再执行检测。</li>\n<li>如果没有满足条件的元素，则返回 false。</li>\n</ul>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// arr.includes(要查找的值, ?从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。)</div><div class=\"line\">var site = [&apos;runoob&apos;, &apos;google&apos;, &apos;taobao&apos;];</div><div class=\"line\">site.includes(&apos;runoob&apos;); // true </div><div class=\"line\">site.includes(&apos;baidu&apos;); // false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// every() 和 some() 这里只以some()举例</div><div class=\"line\"></div><div class=\"line\">// array.some(function(当前元素的值,?当期元素的索引值,?当期元素属于的数组对象),?thisValue)</div><div class=\"line\"></div><div class=\"line\">// 检测数组中是否有元素大于 18，只要有就返回 true</div><div class=\"line\"></div><div class=\"line\">var ages = [3, 10, 18, 20];</div><div class=\"line\">console.log(ages.some(function (age) &#123;</div><div class=\"line\">    return age &gt;= 18;</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">// 控制台输出 true</div></pre></td></tr></table></figure></p>\n<h5 id=\"pop-push-VS-shift-unshift\"><a href=\"#pop-push-VS-shift-unshift\" class=\"headerlink\" title=\"pop() push() VS shift() unshift()\"></a>pop() push() VS shift() unshift()</h5><p>这一组也放在一起讲。</p>\n<p>pop() 和 push() 是在数组的末尾进行添加、删除元素的操作。</p>\n<p>而shift() 和 unshift() 是在数组的头部进行添加、删除元素的操作。</p>\n<p>其余的细节两组都一样，所以只以 pop() 和 push() 为例讲一讲。</p>\n<p>pop() 方法用于删除数组的最后一个元素并返回删除的元素。会改变数组的长度</p>\n<p>push() 方法用于在数组的末尾添加一个元素或多个元素，并返回数组的新长度。会改变数组的长度<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.push(item1, item2, ..., itemX)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class=\"line\">Array1.push(&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;);</div><div class=\"line\">console.log(Array1);</div><div class=\"line\"></div><div class=\"line\">// 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;,&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;]</div><div class=\"line\"></div><div class=\"line\">//array.pop()</div><div class=\"line\"></div><div class=\"line\">var Array2 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class=\"line\">var a = Array2.pop();</div><div class=\"line\">console.log(a);  // 控制台输出 &quot;dd&quot;</div><div class=\"line\">console.log(Array2);  // 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;]</div></pre></td></tr></table></figure></p>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><p>顾名思义，filter() 算是一个过滤的方法，可以把源数组中符合条件的数据都放到一个新的数组中返回。<br>对于空数组不会执行，这个方法也不会改变源数组。<br>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class=\"line\">// array.filter(function(currentValue,index,arr), thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [32, 33, 16, 40];</div><div class=\"line\">console.log(Array1.filter(function(ele)&#123;</div><div class=\"line\">   return ele &gt;= 30;</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">// 输出结果为: [32,33,40]</div></pre></td></tr></table></figure></p>\n<h5 id=\"sort-VS-reverse\"><a href=\"#sort-VS-reverse\" class=\"headerlink\" title=\"sort() VS reverse()\"></a>sort() VS reverse()</h5><p>这两个方法都是对数组进行排序的方法，所以也放在一组讲。</p>\n<p>reverse() 比较简单，是将原来的数组逆序，就不多说了。</p>\n<p>而 sort() 可以按照多种方式排序，又稍微有点复杂，直接贴一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">MDN关于这个方法的文档</a> 吧，讲的更清楚一些</p>\n<h5 id=\"find-VS-findIndex\"><a href=\"#find-VS-findIndex\" class=\"headerlink\" title=\"find() VS findIndex()\"></a>find() VS findIndex()</h5><p>这两个都是查找元素操作。</p>\n<p>find()返回的是满足条件（函数提供）的第一个元素，没有符合的返回 undefined。</p>\n<p>而findIndex()返回的是满足条件（函数提供）的第一个元素的位置，没有符合的返回 -1。<br>对于空数组，它们都不会执行，这两个方法也不会改变数组的原始值。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class=\"line\">// array.find(function(currentValue, index, arr),thisValue)</div><div class=\"line\">// array.findIndex(function(currentValue, index, arr), thisValue)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [3, 19, 18, 20]; </div><div class=\"line\">function condition(ele) &#123;</div><div class=\"line\">    return ele &gt;= 18;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Array1.find(condition));</div><div class=\"line\">// 控制台输出19</div><div class=\"line\"></div><div class=\"line\">console.log(Array1.findIndex(condition));</div><div class=\"line\">// 控制台输出1</div></pre></td></tr></table></figure></p>\n<h5 id=\"indexOf-VS-lastIndexOf\"><a href=\"#indexOf-VS-lastIndexOf\" class=\"headerlink\" title=\"indexOf() VS lastIndexOf()\"></a>indexOf() VS lastIndexOf()</h5><p>这两个方法也类似，一个是查找某元素第一次出现在数组中的位置，另一个是查找某元素最后一次出现在数组中的位置。这个不同也意味着 indexOf() 查找的时候是从数组头开始查找，而 lastIndexOf() 查找的时候是从数组尾开始查找。<br>如果没有符合的元素存在，则两者都返回 -1。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.indexOf(查找的元素,?开始查找的位置。默认是数组起始位置)</div><div class=\"line\"></div><div class=\"line\">// array.lastIndexOf(查找的元素,?开始查找的位置。默认是数组的终止位置，一旦指定了这个值，相当于把数组截断从中间向前寻找元素最后一个出现的位置了)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Orange&quot;, &quot;Apple&quot;];</div><div class=\"line\">console.log(Array1.lastIndexOf(&quot;Apple&quot;, 4));</div><div class=\"line\"></div><div class=\"line\">// 以最难的一个情况为例，控制台输出的是2，即从 Array1[4]向前查找，&quot;Apple&quot;最后出现的位置</div></pre></td></tr></table></figure></p>\n<h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h5><p>slice用于从数组中截取需要的部分，并以新的对象返回，不会改变源数组。一般是对字符串处理的比较多。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// array.slice(?start, ?end)</div><div class=\"line\">// start 或 end 如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</div><div class=\"line\">// 注意选取区间的变化，有以下三种情况</div><div class=\"line\"></div><div class=\"line\">arr.slice();</div><div class=\"line\">// [0, end]</div><div class=\"line\"></div><div class=\"line\">arr.slice(begin);</div><div class=\"line\">// [begin, end]</div><div class=\"line\"></div><div class=\"line\">arr.slice(begin, end);</div><div class=\"line\">// [begin, end)</div><div class=\"line\"></div><div class=\"line\">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;];</div><div class=\"line\">var Array2 = Array1.slice(-3,-1);</div><div class=\"line\"></div><div class=\"line\">// Array2 = [&quot;cc&quot;, &quot;dd&quot;]</div></pre></td></tr></table></figure></p>\n<p>嗯，写的有点多，怕影响阅读体验。<br>其他还有一些平时用的频率没那么高的方法，下篇再写。</p>\n"},{"title":"终于开始写博客了","date":"2017-08-23T05:31:01.000Z","_content":"\n## 也不知在黑暗里沉睡了多久\n\n说起来，真的非常非常久都没有写过东西了，除了每次过年的时候觉得自己必须得写点什么而诞生的年终总结。近些年连微博这种一篇只要140个字符的短消息我都没有怎么发表过。\n\n并不是没有话说，而是要说的话太多，不知从何说起。\n\n从前的时候，说自己的感受，是渴望自己被听到，被了解，而现在，知道自己终将不被人了解，那么我的感受又有什么意义呢，哪怕这感受只是写给自己，聊以自慰。\n\n但是我终究不是没有话说，没说出口的话越攒越多，怎么可能让一个话痨停止讲话，大概他会疯掉。\n于是，我又开始写作了，换了一个方式，换了一个地点，换了一个目的。\n\n## 生活不止眼前的苟且\n\n工作已经两年多了，好吧其实我现在是一枚前端狗。平时工作忙的时候可以说是非常忙了，但也不是每天都很忙，还是有很多时间是花在查资料和自我提升上。写了很多笔记片段，也添加了很多的收藏夹……\n\n两年中，看过无数个人的技术博客，也很多次蠢蠢欲动地想要开始写自己的“技术”博客。但是毕竟技术博客和自说自话地写个人心情记录不一样，我不知道从何开始，也不知道自己写的东西是否能令自己满意，更不知道我写的东西是否会给其他人带来那么一点点的帮助，还自觉自己肚里空空，要写出那种对自己和对别人都有意义的文章实在是太难了，所以这件事就一直搁置到了今天……\n\n如今两年都过去了，这两年不管是我遇到的坑还是我趟过的沟，甚至战胜的问题，我都没有通过博客来记录，不得不说是非常遗憾的了，对于我的拖延，我真的找了太多借口：）\n\n好像是去年冬天吧，忘记了从什么渠道关注了Android界的大牛之一stormzhang，期间断断续续的关注着，一直到现在我可以说我可能已经变成了他的脑残粉，每推必看。虽然我目前的工作并没有涉及到太多的移动端内容，但他打动我的原因，主要有以下两个：\n1. 他做事情非常、非常认真的态度\n2. 他分享的那些读起来简单清晰易懂，内容也很有价值的文章\n其中第一点也是最最重要的一点。\n他本人也经常介绍一些自己写作的经验，以及自己为什么坚持写作的原因，我看过之后觉得很受益，其实不需要担心那么多，只要开始做，就好了。\n\n所以我开始做了。\n\n（这里谢谢stormzhang的分享和激励）\n\n## 天亮走到天黑 从不觉疲惫\n\n下面就说说对自己的期许吧，算是对自己的承诺，希望自己能一直坚持下去，越走越远，回头看的时候还能自检。\n\n作为一个程序员，我要坚持对自己的严格要求，所以博客没有直接在某站注册然后开始写，而是通过 github + Hexo 搭建的，没别的原因，因为觉得逼格不够啊：）\n当然了，说到逼格，现在还差一个属于我的域名，然而天天吃土，权衡了一下还是放弃了，希望有一天通过自己的努力可以给我这个装满东西的博客一个高大上的名字。\n\n以后希望能够在这里记录自己平时工作、学习中遇到的问题，解决问题的过程记录。\n可能主要会包括以下几个方面，也是必须包括这几个方面，为了防止自己偷懒，做个记录：\n- 用户体验、UI方面的知识\n- CSS、HTML方面的知识\n- 各种前端框架、开发工具方面的知识\n- 编程的一些基本功，比如算法、数据结构等一些小知识\n- 自学Adobe各种软件应用的过程\n\n除了上边说的这些，作为一个个人爱好丰富的人，可能还会写一些其他的东西，比如：\n- 平时听歌的感想\n- 有空时候的涂涂画画\n- 个人的回忆、琐事、经历等\n\n## 总结\n艾玛，就说我其实是个话痨压抑太久，一不小心就写了这么多。\n总之，记得自己从哪来，往哪去，坚持，努力，是这个博客存在的所有意义。\n就是干！（脑残粉抄袭stormzhang口头禅哈哈）\n\n\n","source":"_posts/终于开始写博客了.md","raw":"---\ntitle: 终于开始写博客了\ndate: 2017-08-23 13:31:01\ntags: 生活 经历\ncategories: 个人经历\n---\n\n## 也不知在黑暗里沉睡了多久\n\n说起来，真的非常非常久都没有写过东西了，除了每次过年的时候觉得自己必须得写点什么而诞生的年终总结。近些年连微博这种一篇只要140个字符的短消息我都没有怎么发表过。\n\n并不是没有话说，而是要说的话太多，不知从何说起。\n\n从前的时候，说自己的感受，是渴望自己被听到，被了解，而现在，知道自己终将不被人了解，那么我的感受又有什么意义呢，哪怕这感受只是写给自己，聊以自慰。\n\n但是我终究不是没有话说，没说出口的话越攒越多，怎么可能让一个话痨停止讲话，大概他会疯掉。\n于是，我又开始写作了，换了一个方式，换了一个地点，换了一个目的。\n\n## 生活不止眼前的苟且\n\n工作已经两年多了，好吧其实我现在是一枚前端狗。平时工作忙的时候可以说是非常忙了，但也不是每天都很忙，还是有很多时间是花在查资料和自我提升上。写了很多笔记片段，也添加了很多的收藏夹……\n\n两年中，看过无数个人的技术博客，也很多次蠢蠢欲动地想要开始写自己的“技术”博客。但是毕竟技术博客和自说自话地写个人心情记录不一样，我不知道从何开始，也不知道自己写的东西是否能令自己满意，更不知道我写的东西是否会给其他人带来那么一点点的帮助，还自觉自己肚里空空，要写出那种对自己和对别人都有意义的文章实在是太难了，所以这件事就一直搁置到了今天……\n\n如今两年都过去了，这两年不管是我遇到的坑还是我趟过的沟，甚至战胜的问题，我都没有通过博客来记录，不得不说是非常遗憾的了，对于我的拖延，我真的找了太多借口：）\n\n好像是去年冬天吧，忘记了从什么渠道关注了Android界的大牛之一stormzhang，期间断断续续的关注着，一直到现在我可以说我可能已经变成了他的脑残粉，每推必看。虽然我目前的工作并没有涉及到太多的移动端内容，但他打动我的原因，主要有以下两个：\n1. 他做事情非常、非常认真的态度\n2. 他分享的那些读起来简单清晰易懂，内容也很有价值的文章\n其中第一点也是最最重要的一点。\n他本人也经常介绍一些自己写作的经验，以及自己为什么坚持写作的原因，我看过之后觉得很受益，其实不需要担心那么多，只要开始做，就好了。\n\n所以我开始做了。\n\n（这里谢谢stormzhang的分享和激励）\n\n## 天亮走到天黑 从不觉疲惫\n\n下面就说说对自己的期许吧，算是对自己的承诺，希望自己能一直坚持下去，越走越远，回头看的时候还能自检。\n\n作为一个程序员，我要坚持对自己的严格要求，所以博客没有直接在某站注册然后开始写，而是通过 github + Hexo 搭建的，没别的原因，因为觉得逼格不够啊：）\n当然了，说到逼格，现在还差一个属于我的域名，然而天天吃土，权衡了一下还是放弃了，希望有一天通过自己的努力可以给我这个装满东西的博客一个高大上的名字。\n\n以后希望能够在这里记录自己平时工作、学习中遇到的问题，解决问题的过程记录。\n可能主要会包括以下几个方面，也是必须包括这几个方面，为了防止自己偷懒，做个记录：\n- 用户体验、UI方面的知识\n- CSS、HTML方面的知识\n- 各种前端框架、开发工具方面的知识\n- 编程的一些基本功，比如算法、数据结构等一些小知识\n- 自学Adobe各种软件应用的过程\n\n除了上边说的这些，作为一个个人爱好丰富的人，可能还会写一些其他的东西，比如：\n- 平时听歌的感想\n- 有空时候的涂涂画画\n- 个人的回忆、琐事、经历等\n\n## 总结\n艾玛，就说我其实是个话痨压抑太久，一不小心就写了这么多。\n总之，记得自己从哪来，往哪去，坚持，努力，是这个博客存在的所有意义。\n就是干！（脑残粉抄袭stormzhang口头禅哈哈）\n\n\n","slug":"终于开始写博客了","published":1,"updated":"2019-03-08T03:09:28.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ru2osi000vzoq4ltwd15ut","content":"<h2 id=\"也不知在黑暗里沉睡了多久\"><a href=\"#也不知在黑暗里沉睡了多久\" class=\"headerlink\" title=\"也不知在黑暗里沉睡了多久\"></a>也不知在黑暗里沉睡了多久</h2><p>说起来，真的非常非常久都没有写过东西了，除了每次过年的时候觉得自己必须得写点什么而诞生的年终总结。近些年连微博这种一篇只要140个字符的短消息我都没有怎么发表过。</p>\n<p>并不是没有话说，而是要说的话太多，不知从何说起。</p>\n<p>从前的时候，说自己的感受，是渴望自己被听到，被了解，而现在，知道自己终将不被人了解，那么我的感受又有什么意义呢，哪怕这感受只是写给自己，聊以自慰。</p>\n<p>但是我终究不是没有话说，没说出口的话越攒越多，怎么可能让一个话痨停止讲话，大概他会疯掉。<br>于是，我又开始写作了，换了一个方式，换了一个地点，换了一个目的。</p>\n<h2 id=\"生活不止眼前的苟且\"><a href=\"#生活不止眼前的苟且\" class=\"headerlink\" title=\"生活不止眼前的苟且\"></a>生活不止眼前的苟且</h2><p>工作已经两年多了，好吧其实我现在是一枚前端狗。平时工作忙的时候可以说是非常忙了，但也不是每天都很忙，还是有很多时间是花在查资料和自我提升上。写了很多笔记片段，也添加了很多的收藏夹……</p>\n<p>两年中，看过无数个人的技术博客，也很多次蠢蠢欲动地想要开始写自己的“技术”博客。但是毕竟技术博客和自说自话地写个人心情记录不一样，我不知道从何开始，也不知道自己写的东西是否能令自己满意，更不知道我写的东西是否会给其他人带来那么一点点的帮助，还自觉自己肚里空空，要写出那种对自己和对别人都有意义的文章实在是太难了，所以这件事就一直搁置到了今天……</p>\n<p>如今两年都过去了，这两年不管是我遇到的坑还是我趟过的沟，甚至战胜的问题，我都没有通过博客来记录，不得不说是非常遗憾的了，对于我的拖延，我真的找了太多借口：）</p>\n<p>好像是去年冬天吧，忘记了从什么渠道关注了Android界的大牛之一stormzhang，期间断断续续的关注着，一直到现在我可以说我可能已经变成了他的脑残粉，每推必看。虽然我目前的工作并没有涉及到太多的移动端内容，但他打动我的原因，主要有以下两个：</p>\n<ol>\n<li>他做事情非常、非常认真的态度</li>\n<li>他分享的那些读起来简单清晰易懂，内容也很有价值的文章<br>其中第一点也是最最重要的一点。<br>他本人也经常介绍一些自己写作的经验，以及自己为什么坚持写作的原因，我看过之后觉得很受益，其实不需要担心那么多，只要开始做，就好了。</li>\n</ol>\n<p>所以我开始做了。</p>\n<p>（这里谢谢stormzhang的分享和激励）</p>\n<h2 id=\"天亮走到天黑-从不觉疲惫\"><a href=\"#天亮走到天黑-从不觉疲惫\" class=\"headerlink\" title=\"天亮走到天黑 从不觉疲惫\"></a>天亮走到天黑 从不觉疲惫</h2><p>下面就说说对自己的期许吧，算是对自己的承诺，希望自己能一直坚持下去，越走越远，回头看的时候还能自检。</p>\n<p>作为一个程序员，我要坚持对自己的严格要求，所以博客没有直接在某站注册然后开始写，而是通过 github + Hexo 搭建的，没别的原因，因为觉得逼格不够啊：）<br>当然了，说到逼格，现在还差一个属于我的域名，然而天天吃土，权衡了一下还是放弃了，希望有一天通过自己的努力可以给我这个装满东西的博客一个高大上的名字。</p>\n<p>以后希望能够在这里记录自己平时工作、学习中遇到的问题，解决问题的过程记录。<br>可能主要会包括以下几个方面，也是必须包括这几个方面，为了防止自己偷懒，做个记录：</p>\n<ul>\n<li>用户体验、UI方面的知识</li>\n<li>CSS、HTML方面的知识</li>\n<li>各种前端框架、开发工具方面的知识</li>\n<li>编程的一些基本功，比如算法、数据结构等一些小知识</li>\n<li>自学Adobe各种软件应用的过程</li>\n</ul>\n<p>除了上边说的这些，作为一个个人爱好丰富的人，可能还会写一些其他的东西，比如：</p>\n<ul>\n<li>平时听歌的感想</li>\n<li>有空时候的涂涂画画</li>\n<li>个人的回忆、琐事、经历等</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>艾玛，就说我其实是个话痨压抑太久，一不小心就写了这么多。<br>总之，记得自己从哪来，往哪去，坚持，努力，是这个博客存在的所有意义。<br>就是干！（脑残粉抄袭stormzhang口头禅哈哈）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"也不知在黑暗里沉睡了多久\"><a href=\"#也不知在黑暗里沉睡了多久\" class=\"headerlink\" title=\"也不知在黑暗里沉睡了多久\"></a>也不知在黑暗里沉睡了多久</h2><p>说起来，真的非常非常久都没有写过东西了，除了每次过年的时候觉得自己必须得写点什么而诞生的年终总结。近些年连微博这种一篇只要140个字符的短消息我都没有怎么发表过。</p>\n<p>并不是没有话说，而是要说的话太多，不知从何说起。</p>\n<p>从前的时候，说自己的感受，是渴望自己被听到，被了解，而现在，知道自己终将不被人了解，那么我的感受又有什么意义呢，哪怕这感受只是写给自己，聊以自慰。</p>\n<p>但是我终究不是没有话说，没说出口的话越攒越多，怎么可能让一个话痨停止讲话，大概他会疯掉。<br>于是，我又开始写作了，换了一个方式，换了一个地点，换了一个目的。</p>\n<h2 id=\"生活不止眼前的苟且\"><a href=\"#生活不止眼前的苟且\" class=\"headerlink\" title=\"生活不止眼前的苟且\"></a>生活不止眼前的苟且</h2><p>工作已经两年多了，好吧其实我现在是一枚前端狗。平时工作忙的时候可以说是非常忙了，但也不是每天都很忙，还是有很多时间是花在查资料和自我提升上。写了很多笔记片段，也添加了很多的收藏夹……</p>\n<p>两年中，看过无数个人的技术博客，也很多次蠢蠢欲动地想要开始写自己的“技术”博客。但是毕竟技术博客和自说自话地写个人心情记录不一样，我不知道从何开始，也不知道自己写的东西是否能令自己满意，更不知道我写的东西是否会给其他人带来那么一点点的帮助，还自觉自己肚里空空，要写出那种对自己和对别人都有意义的文章实在是太难了，所以这件事就一直搁置到了今天……</p>\n<p>如今两年都过去了，这两年不管是我遇到的坑还是我趟过的沟，甚至战胜的问题，我都没有通过博客来记录，不得不说是非常遗憾的了，对于我的拖延，我真的找了太多借口：）</p>\n<p>好像是去年冬天吧，忘记了从什么渠道关注了Android界的大牛之一stormzhang，期间断断续续的关注着，一直到现在我可以说我可能已经变成了他的脑残粉，每推必看。虽然我目前的工作并没有涉及到太多的移动端内容，但他打动我的原因，主要有以下两个：</p>\n<ol>\n<li>他做事情非常、非常认真的态度</li>\n<li>他分享的那些读起来简单清晰易懂，内容也很有价值的文章<br>其中第一点也是最最重要的一点。<br>他本人也经常介绍一些自己写作的经验，以及自己为什么坚持写作的原因，我看过之后觉得很受益，其实不需要担心那么多，只要开始做，就好了。</li>\n</ol>\n<p>所以我开始做了。</p>\n<p>（这里谢谢stormzhang的分享和激励）</p>\n<h2 id=\"天亮走到天黑-从不觉疲惫\"><a href=\"#天亮走到天黑-从不觉疲惫\" class=\"headerlink\" title=\"天亮走到天黑 从不觉疲惫\"></a>天亮走到天黑 从不觉疲惫</h2><p>下面就说说对自己的期许吧，算是对自己的承诺，希望自己能一直坚持下去，越走越远，回头看的时候还能自检。</p>\n<p>作为一个程序员，我要坚持对自己的严格要求，所以博客没有直接在某站注册然后开始写，而是通过 github + Hexo 搭建的，没别的原因，因为觉得逼格不够啊：）<br>当然了，说到逼格，现在还差一个属于我的域名，然而天天吃土，权衡了一下还是放弃了，希望有一天通过自己的努力可以给我这个装满东西的博客一个高大上的名字。</p>\n<p>以后希望能够在这里记录自己平时工作、学习中遇到的问题，解决问题的过程记录。<br>可能主要会包括以下几个方面，也是必须包括这几个方面，为了防止自己偷懒，做个记录：</p>\n<ul>\n<li>用户体验、UI方面的知识</li>\n<li>CSS、HTML方面的知识</li>\n<li>各种前端框架、开发工具方面的知识</li>\n<li>编程的一些基本功，比如算法、数据结构等一些小知识</li>\n<li>自学Adobe各种软件应用的过程</li>\n</ul>\n<p>除了上边说的这些，作为一个个人爱好丰富的人，可能还会写一些其他的东西，比如：</p>\n<ul>\n<li>平时听歌的感想</li>\n<li>有空时候的涂涂画画</li>\n<li>个人的回忆、琐事、经历等</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>艾玛，就说我其实是个话痨压抑太久，一不小心就写了这么多。<br>总之，记得自己从哪来，往哪去，坚持，努力，是这个博客存在的所有意义。<br>就是干！（脑残粉抄袭stormzhang口头禅哈哈）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0ru2oml0002zoq4qvtjq7li","category_id":"ck0ru2onx0004zoq44huta81b","_id":"ck0ru2op9000bzoq456sxwru6"},{"post_id":"ck0ru2ond0003zoq4mfnsnlhy","category_id":"ck0ru2onx0004zoq44huta81b","_id":"ck0ru2opj000fzoq41qycgt8o"},{"post_id":"ck0ru2ooa0006zoq4j6v6n8iq","category_id":"ck0ru2opd000czoq45dotdyvd","_id":"ck0ru2opv000jzoq4heaikl6g"},{"post_id":"ck0ru2ooo0007zoq4lbw6raxo","category_id":"ck0ru2opk000gzoq48l29tt1h","_id":"ck0ru2opy000lzoq4hyay5ybg"},{"post_id":"ck0ru2oqr000mzoq4nav0fnhj","category_id":"ck0ru2opd000czoq45dotdyvd","_id":"ck0ru2os2000qzoq4740jjuwl"},{"post_id":"ck0ru2orc000nzoq4wjl6eob0","category_id":"ck0ru2opd000czoq45dotdyvd","_id":"ck0ru2os6000szoq4nb0ijjvr"},{"post_id":"ck0ru2orp000pzoq4m1s0sdfd","category_id":"ck0ru2onx0004zoq44huta81b","_id":"ck0ru2osa000uzoq4xw6twbwr"},{"post_id":"ck0ru2osi000vzoq4ltwd15ut","category_id":"ck0ru2opk000gzoq48l29tt1h","_id":"ck0ru2osr000xzoq4pqb17jz8"}],"PostTag":[{"post_id":"ck0ru2oml0002zoq4qvtjq7li","tag_id":"ck0ru2oo70005zoq4bwudxehh","_id":"ck0ru2op6000azoq452ysyt0v"},{"post_id":"ck0ru2ond0003zoq4mfnsnlhy","tag_id":"ck0ru2oox0009zoq4u5xx01c0","_id":"ck0ru2oph000ezoq404oyysy4"},{"post_id":"ck0ru2ooa0006zoq4j6v6n8iq","tag_id":"ck0ru2opf000dzoq4onfjdo4v","_id":"ck0ru2opt000izoq4uf46uksn"},{"post_id":"ck0ru2ooo0007zoq4lbw6raxo","tag_id":"ck0ru2opm000hzoq4f6ropfbb","_id":"ck0ru2opx000kzoq4fwzhwl2f"},{"post_id":"ck0ru2oqr000mzoq4nav0fnhj","tag_id":"ck0ru2opf000dzoq4onfjdo4v","_id":"ck0ru2oro000ozoq4m4p6aqxg"},{"post_id":"ck0ru2orc000nzoq4wjl6eob0","tag_id":"ck0ru2opf000dzoq4onfjdo4v","_id":"ck0ru2os3000rzoq4ykh4nrqd"},{"post_id":"ck0ru2orp000pzoq4m1s0sdfd","tag_id":"ck0ru2oo70005zoq4bwudxehh","_id":"ck0ru2os7000tzoq4qa7r0qmn"},{"post_id":"ck0ru2osi000vzoq4ltwd15ut","tag_id":"ck0ru2opm000hzoq4f6ropfbb","_id":"ck0ru2osp000wzoq4wqyn6kan"}],"Tag":[{"name":"Javascript","_id":"ck0ru2oo70005zoq4bwudxehh"},{"name":"Echarts","_id":"ck0ru2oox0009zoq4u5xx01c0"},{"name":"Tools","_id":"ck0ru2opf000dzoq4onfjdo4v"},{"name":"生活 经历","_id":"ck0ru2opm000hzoq4f6ropfbb"}]}}